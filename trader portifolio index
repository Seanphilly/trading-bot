{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "provenance": [],
      "authorship_tag": "ABX9TyMIdOfOEKjf7UKoM+aPqfgG",
      "include_colab_link": true
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    },
    "language_info": {
      "name": "python"
    }
  },
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/Seanphilly/trading-bot/blob/master/Untitled4.ipynb\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "import requests\n",
        "import numpy as np\n",
        "import json\n",
        "\n",
        "# Function to calculate trading metrics for a single trader\n",
        "def calculate_trading_metrics(trader_data):\n",
        "    total_trades = trader_data.get(\"trades\", 0)\n",
        "    won_trades = trader_data.get(\"wonTrades\", 0)\n",
        "    lost_trades = trader_data.get(\"lostTrades\", 0)\n",
        "    win_rate = trader_data.get(\"wonTradesPercent\", 0) / 100\n",
        "    loss_rate = trader_data.get(\"lostTradesPercent\", 0) / 100\n",
        "    avg_win = trader_data.get(\"averageWin\", 1)\n",
        "    avg_loss = abs(trader_data.get(\"averageLoss\", 1))  # Convert to positive\n",
        "    highest_balance = trader_data.get(\"highestBalance\", 0)\n",
        "    current_balance = trader_data.get(\"balance\", 0)\n",
        "    max_drawdown = highest_balance - current_balance\n",
        "    expectancy = trader_data.get(\"expectancy\", 0)\n",
        "\n",
        "    # Calculate Profit Factor\n",
        "    total_winning_profit = won_trades * avg_win\n",
        "    total_losing_loss = lost_trades * avg_loss\n",
        "    profit_factor = (total_winning_profit / total_losing_loss) if total_losing_loss > 0 else None\n",
        "\n",
        "    # Standard Deviation of Returns (assuming trades are equally spaced)\n",
        "    trade_returns = np.array([avg_win] * won_trades + [-avg_loss] * lost_trades)\n",
        "    std_dev = np.std(trade_returns) if total_trades > 1 else 0\n",
        "\n",
        "    # Sharpe Ratio (assuming risk-free rate = 0)\n",
        "    sharpe_ratio = (expectancy / std_dev) if std_dev != 0 else 0\n",
        "\n",
        "    # Risk-Reward Ratio\n",
        "    risk_reward_ratio = avg_win / avg_loss if avg_loss > 0 else None\n",
        "\n",
        "    # Kelly Criterion\n",
        "    kelly_criterion = win_rate - ((1 - win_rate) / risk_reward_ratio) if risk_reward_ratio else None\n",
        "\n",
        "    # Compile results\n",
        "    metrics = {\n",
        "        \"Total Trades\": total_trades,\n",
        "        \"Win Rate (%)\": win_rate * 100,\n",
        "        \"Total Wins\": won_trades,\n",
        "        \"Total Losses\": lost_trades,\n",
        "        \"Profit Factor\": profit_factor,\n",
        "        \"Expectancy (Avg Profit per Trade)\": expectancy,\n",
        "        \"Max Drawdown\": max_drawdown,\n",
        "        \"Standard Deviation\": std_dev,\n",
        "        \"Sharpe Ratio\": sharpe_ratio,\n",
        "        \"Risk-Reward Ratio\": risk_reward_ratio,\n",
        "        \"Kelly Criterion\": kelly_criterion,\n",
        "    }\n",
        "\n",
        "    return metrics\n",
        "\n",
        "# Function to fetch trader data from an API\n",
        "def fetch_traders_from_api(api_url):\n",
        "    try:\n",
        "        response = requests.get(api_url)\n",
        "        if response.status_code == 200:\n",
        "            traders = response.json()\n",
        "            return traders  # Returns the JSON response as a list of trader data\n",
        "        else:\n",
        "            print(f\"Error: API returned status code {response.status_code}\")\n",
        "            return []\n",
        "    except requests.exceptions.RequestException as e:\n",
        "        print(f\"Error fetching data: {e}\")\n",
        "        return []\n",
        "\n",
        "# Process multiple traders and display results\n",
        "def process_traders(trader_list):\n",
        "    results = {}\n",
        "    for i, trader in enumerate(trader_list):\n",
        "        results[f\"Trader {i+1}\"] = calculate_trading_metrics(trader)\n",
        "\n",
        "    return results\n",
        "\n",
        "# Main execution\n",
        "if __name__ == \"__main__\":\n",
        "    # Define API endpoint (replace with actual broker API URL)\n",
        "    API_URL = \"https://example.com/api/traders\"  # Replace with real API URL\n",
        "\n",
        "    # Fetch traders from API\n",
        "    traders = fetch_traders_from_api(API_URL)\n",
        "\n",
        "    if traders:\n",
        "        # Process traders\n",
        "        results = process_traders(traders)\n",
        "\n",
        "        # Display results\n",
        "        for trader, metrics in results.items():\n",
        "            print(f\"\\n{trader} Metrics:\")\n",
        "            for key, value in metrics.items():\n",
        "                print(f\"{key}: {value}\")\n",
        "    else:\n",
        "        print(\"No trader data available.\")\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "FTZEN9GI8H0H",
        "outputId": "2b4028cb-0728-43e5-93bd-971e36881881"
      },
      "execution_count": 1,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Error: API returned status code 404\n",
            "No trader data available.\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "import random\n",
        "\n",
        "# Generate a dataset of 10 traders with different styles and asset classes\n",
        "def generate_traders():\n",
        "    trader_styles = [\"Scalper\", \"Swing Trader\", \"Algorithmic Trader\", \"Day Trader\", \"Position Trader\"]\n",
        "    asset_classes = [\"Forex\", \"Stocks\", \"Crypto\", \"Commodities\", \"Indices\"]\n",
        "\n",
        "    traders = []\n",
        "    random.seed(42)  # Consistent random results\n",
        "\n",
        "    for i in range(10):\n",
        "        style = random.choice(trader_styles)\n",
        "        asset = random.choice(asset_classes)\n",
        "        won_trades = random.randint(5, 50)\n",
        "        lost_trades = random.randint(5, 50)\n",
        "        total_trades = won_trades + lost_trades\n",
        "        win_rate = (won_trades / total_trades) * 100\n",
        "        loss_rate = 100 - win_rate\n",
        "        avg_win = round(random.uniform(10, 1000), 2)\n",
        "        avg_loss = -round(random.uniform(10, 1000), 2)\n",
        "        balance = round(random.uniform(1000, 50000), 2)\n",
        "        highest_balance = balance + round(random.uniform(500, 5000), 2)\n",
        "        profit = round((won_trades * avg_win) + (lost_trades * avg_loss), 2)\n",
        "        expectancy = round((win_rate / 100) * avg_win + (loss_rate / 100) * avg_loss, 2)\n",
        "\n",
        "        trader = {\n",
        "            \"id\": i + 1,\n",
        "            \"name\": f\"Trader_{i+1}\",\n",
        "            \"style\": style,\n",
        "            \"asset_class\": asset,\n",
        "            \"equity\": balance,\n",
        "            \"margin\": 0,\n",
        "            \"freeMargin\": balance,\n",
        "            \"profit\": profit,\n",
        "            \"trades\": total_trades,\n",
        "            \"balance\": balance,\n",
        "            \"highestBalance\": highest_balance,\n",
        "            \"wonTradesPercent\": win_rate,\n",
        "            \"lostTradesPercent\": loss_rate,\n",
        "            \"wonTrades\": won_trades,\n",
        "            \"lostTrades\": lost_trades,\n",
        "            \"averageWin\": avg_win,\n",
        "            \"averageLoss\": avg_loss,\n",
        "            \"expectancy\": expectancy\n",
        "        }\n",
        "\n",
        "        traders.append(trader)\n",
        "\n",
        "    return traders\n",
        "\n",
        "# Save the generated traders as a database (simulated in a Python module)\n",
        "TRADERS_DB = generate_traders()\n",
        "\n",
        "if __name__ == \"__main__\":\n",
        "    for trader in TRADERS_DB:\n",
        "        print(trader)\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "Hqd9hg4Y_zfU",
        "outputId": "6322b910-a9ce-4660-aa6d-1d0326f1fa70"
      },
      "execution_count": 2,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "{'id': 1, 'name': 'Trader_1', 'style': 'Scalper', 'asset_class': 'Forex', 'equity': 34158.27, 'margin': 0, 'freeMargin': 34158.27, 'profit': -9700.64, 'trades': 42, 'balance': 34158.27, 'highestBalance': 38673.079999999994, 'wonTradesPercent': 52.38095238095239, 'lostTradesPercent': 47.61904761904761, 'wonTrades': 22, 'lostTrades': 20, 'averageWin': 230.98, 'averageLoss': -739.11, 'expectancy': -230.97}\n",
            "{'id': 2, 'name': 'Trader_2', 'style': 'Scalper', 'asset_class': 'Indices', 'equity': 25762.41, 'margin': 0, 'freeMargin': 25762.41, 'profit': -321.15, 'trades': 39, 'balance': 25762.41, 'highestBalance': 26381.82, 'wonTradesPercent': 82.05128205128204, 'lostTradesPercent': 17.948717948717956, 'wonTrades': 32, 'lostTrades': 7, 'averageWin': 39.5, 'averageLoss': -226.45, 'expectancy': -8.23}\n",
            "{'id': 3, 'name': 'Trader_3', 'style': 'Swing Trader', 'asset_class': 'Indices', 'equity': 43595.72, 'margin': 0, 'freeMargin': 43595.72, 'profit': 8673.53, 'trades': 50, 'balance': 43595.72, 'highestBalance': 47510.35, 'wonTradesPercent': 62.0, 'lostTradesPercent': 38.0, 'wonTrades': 31, 'lostTrades': 19, 'averageWin': 454.72, 'averageLoss': -285.41, 'expectancy': 173.47}\n",
            "{'id': 4, 'name': 'Trader_4', 'style': 'Swing Trader', 'asset_class': 'Commodities', 'equity': 17493.13, 'margin': 0, 'freeMargin': 17493.13, 'profit': -16806.16, 'trades': 48, 'balance': 17493.13, 'highestBalance': 18410.49, 'wonTradesPercent': 54.166666666666664, 'lostTradesPercent': 45.833333333333336, 'wonTrades': 26, 'lostTrades': 22, 'averageWin': 163.92, 'averageLoss': -957.64, 'expectancy': -350.13}\n",
            "{'id': 5, 'name': 'Trader_5', 'style': 'Scalper', 'asset_class': 'Crypto', 'equity': 23511.82, 'margin': 0, 'freeMargin': 23511.82, 'profit': 5060.9, 'trades': 70, 'balance': 23511.82, 'highestBalance': 24573.54, 'wonTradesPercent': 38.57142857142858, 'lostTradesPercent': 61.42857142857142, 'wonTrades': 27, 'lostTrades': 43, 'averageWin': 271.88, 'averageLoss': -53.02, 'expectancy': 72.3}\n",
            "{'id': 6, 'name': 'Trader_6', 'style': 'Day Trader', 'asset_class': 'Forex', 'equity': 43223.64, 'margin': 0, 'freeMargin': 43223.64, 'profit': 18930.81, 'trades': 63, 'balance': 43223.64, 'highestBalance': 46321.72, 'wonTradesPercent': 63.49206349206349, 'lostTradesPercent': 36.50793650793651, 'wonTrades': 40, 'lostTrades': 23, 'averageWin': 831.11, 'averageLoss': -622.33, 'expectancy': 300.49}\n",
            "{'id': 7, 'name': 'Trader_7', 'style': 'Scalper', 'asset_class': 'Forex', 'equity': 42910.57, 'margin': 0, 'freeMargin': 42910.57, 'profit': 17718.95, 'trades': 66, 'balance': 42910.57, 'highestBalance': 47309.75, 'wonTradesPercent': 71.21212121212122, 'lostTradesPercent': 28.787878787878782, 'wonTrades': 47, 'lostTrades': 19, 'averageWin': 775.34, 'averageLoss': -985.37, 'expectancy': 268.47}\n",
            "{'id': 8, 'name': 'Trader_8', 'style': 'Day Trader', 'asset_class': 'Crypto', 'equity': 18408.26, 'margin': 0, 'freeMargin': 18408.26, 'profit': 20719.83, 'trades': 79, 'balance': 18408.26, 'highestBalance': 21924.05, 'wonTradesPercent': 43.037974683544306, 'lostTradesPercent': 56.962025316455694, 'wonTrades': 34, 'lostTrades': 45, 'averageWin': 835.77, 'averageLoss': -171.03, 'expectancy': 262.28}\n",
            "{'id': 9, 'name': 'Trader_9', 'style': 'Scalper', 'asset_class': 'Indices', 'equity': 23650.75, 'margin': 0, 'freeMargin': 23650.75, 'profit': 20460.6, 'trades': 60, 'balance': 23650.75, 'highestBalance': 25365.52, 'wonTradesPercent': 75.0, 'lostTradesPercent': 25.0, 'wonTrades': 45, 'lostTrades': 15, 'averageWin': 538.8, 'averageLoss': -252.36, 'expectancy': 341.01}\n",
            "{'id': 10, 'name': 'Trader_10', 'style': 'Position Trader', 'asset_class': 'Stocks', 'equity': 12223.36, 'margin': 0, 'freeMargin': 12223.36, 'profit': 21076.16, 'trades': 73, 'balance': 12223.36, 'highestBalance': 12867.810000000001, 'wonTradesPercent': 65.75342465753424, 'lostTradesPercent': 34.24657534246576, 'wonTrades': 48, 'lostTrades': 25, 'averageWin': 844.42, 'averageLoss': -778.24, 'expectancy': 288.71}\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "import numpy as np\n",
        "\n",
        "\n",
        "# Function to calculate trading metrics for a single trader\n",
        "def calculate_trading_metrics(trader_data):\n",
        "    total_trades = trader_data[\"trades\"]\n",
        "    won_trades = trader_data[\"wonTrades\"]\n",
        "    lost_trades = trader_data[\"lostTrades\"]\n",
        "    win_rate = trader_data[\"wonTradesPercent\"] / 100\n",
        "    loss_rate = trader_data[\"lostTradesPercent\"] / 100\n",
        "    avg_win = trader_data[\"averageWin\"]\n",
        "    avg_loss = abs(trader_data[\"averageLoss\"])  # Convert to positive\n",
        "    highest_balance = trader_data[\"highestBalance\"]\n",
        "    current_balance = trader_data[\"balance\"]\n",
        "    max_drawdown = highest_balance - current_balance\n",
        "    expectancy = trader_data[\"expectancy\"]\n",
        "\n",
        "    # Calculate Profit Factor\n",
        "    total_winning_profit = won_trades * avg_win\n",
        "    total_losing_loss = lost_trades * avg_loss\n",
        "    profit_factor = (total_winning_profit / total_losing_loss) if total_losing_loss > 0 else None\n",
        "\n",
        "    # Standard Deviation of Returns (assuming trades are equally spaced)\n",
        "    trade_returns = np.array([avg_win] * won_trades + [-avg_loss] * lost_trades)\n",
        "    std_dev = np.std(trade_returns) if total_trades > 1 else 0\n",
        "\n",
        "    # Sharpe Ratio (assuming risk-free rate = 0)\n",
        "    sharpe_ratio = (expectancy / std_dev) if std_dev != 0 else 0\n",
        "\n",
        "    # Risk-Reward Ratio\n",
        "    risk_reward_ratio = avg_win / avg_loss if avg_loss > 0 else None\n",
        "\n",
        "    # Kelly Criterion\n",
        "    kelly_criterion = win_rate - ((1 - win_rate) / risk_reward_ratio) if risk_reward_ratio else None\n",
        "\n",
        "    # Compile results\n",
        "    metrics = {\n",
        "        \"Trader Name\": trader_data[\"name\"],\n",
        "        \"Trading Style\": trader_data[\"style\"],\n",
        "        \"Asset Class\": trader_data[\"asset_class\"],\n",
        "        \"Total Trades\": total_trades,\n",
        "        \"Win Rate (%)\": round(win_rate * 100, 2),\n",
        "        \"Total Wins\": won_trades,\n",
        "        \"Total Losses\": lost_trades,\n",
        "        \"Profit Factor\": round(profit_factor, 2) if profit_factor else \"N/A\",\n",
        "        \"Expectancy (Avg Profit per Trade)\": round(expectancy, 2),\n",
        "        \"Max Drawdown\": round(max_drawdown, 2),\n",
        "        \"Standard Deviation\": round(std_dev, 2),\n",
        "        \"Sharpe Ratio\": round(sharpe_ratio, 2),\n",
        "        \"Risk-Reward Ratio\": round(risk_reward_ratio, 2) if risk_reward_ratio else \"N/A\",\n",
        "        \"Kelly Criterion\": round(kelly_criterion, 2) if kelly_criterion else \"N/A\",\n",
        "    }\n",
        "\n",
        "    return metrics\n",
        "\n",
        "# Process multiple traders and display results\n",
        "def process_traders(trader_list):\n",
        "    results = {}\n",
        "    for trader in trader_list:\n",
        "        results[trader[\"name\"]] = calculate_trading_metrics(trader)\n",
        "\n",
        "    return results\n",
        "\n",
        "# Main execution\n",
        "if __name__ == \"__main__\":\n",
        "    # Process traders from in-database information\n",
        "    results = process_traders(TRADERS_DB)\n",
        "\n",
        "    # Display results\n",
        "    for trader, metrics in results.items():\n",
        "        print(f\"\\n{trader} Metrics:\")\n",
        "        for key, value in metrics.items():\n",
        "            print(f\"{key}: {value}\")\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "n6RZr-Cy_0Yx",
        "outputId": "c8016bac-e978-4076-dfd5-ef4957c343f7"
      },
      "execution_count": 3,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "\n",
            "Trader_1 Metrics:\n",
            "Trader Name: Trader_1\n",
            "Trading Style: Scalper\n",
            "Asset Class: Forex\n",
            "Total Trades: 42\n",
            "Win Rate (%): 52.38\n",
            "Total Wins: 22\n",
            "Total Losses: 20\n",
            "Profit Factor: 0.34\n",
            "Expectancy (Avg Profit per Trade): -230.97\n",
            "Max Drawdown: 4514.81\n",
            "Standard Deviation: 484.49\n",
            "Sharpe Ratio: -0.48\n",
            "Risk-Reward Ratio: 0.31\n",
            "Kelly Criterion: -1.0\n",
            "\n",
            "Trader_2 Metrics:\n",
            "Trader Name: Trader_2\n",
            "Trading Style: Scalper\n",
            "Asset Class: Indices\n",
            "Total Trades: 39\n",
            "Win Rate (%): 82.05\n",
            "Total Wins: 32\n",
            "Total Losses: 7\n",
            "Profit Factor: 0.8\n",
            "Expectancy (Avg Profit per Trade): -8.23\n",
            "Max Drawdown: 619.41\n",
            "Standard Deviation: 102.06\n",
            "Sharpe Ratio: -0.08\n",
            "Risk-Reward Ratio: 0.17\n",
            "Kelly Criterion: -0.21\n",
            "\n",
            "Trader_3 Metrics:\n",
            "Trader Name: Trader_3\n",
            "Trading Style: Swing Trader\n",
            "Asset Class: Indices\n",
            "Total Trades: 50\n",
            "Win Rate (%): 62.0\n",
            "Total Wins: 31\n",
            "Total Losses: 19\n",
            "Profit Factor: 2.6\n",
            "Expectancy (Avg Profit per Trade): 173.47\n",
            "Max Drawdown: 3914.63\n",
            "Standard Deviation: 359.25\n",
            "Sharpe Ratio: 0.48\n",
            "Risk-Reward Ratio: 1.59\n",
            "Kelly Criterion: 0.38\n",
            "\n",
            "Trader_4 Metrics:\n",
            "Trader Name: Trader_4\n",
            "Trading Style: Swing Trader\n",
            "Asset Class: Commodities\n",
            "Total Trades: 48\n",
            "Win Rate (%): 54.17\n",
            "Total Wins: 26\n",
            "Total Losses: 22\n",
            "Profit Factor: 0.2\n",
            "Expectancy (Avg Profit per Trade): -350.13\n",
            "Max Drawdown: 917.36\n",
            "Standard Deviation: 558.83\n",
            "Sharpe Ratio: -0.63\n",
            "Risk-Reward Ratio: 0.17\n",
            "Kelly Criterion: -2.14\n",
            "\n",
            "Trader_5 Metrics:\n",
            "Trader Name: Trader_5\n",
            "Trading Style: Scalper\n",
            "Asset Class: Crypto\n",
            "Total Trades: 70\n",
            "Win Rate (%): 38.57\n",
            "Total Wins: 27\n",
            "Total Losses: 43\n",
            "Profit Factor: 3.22\n",
            "Expectancy (Avg Profit per Trade): 72.3\n",
            "Max Drawdown: 1061.72\n",
            "Standard Deviation: 158.15\n",
            "Sharpe Ratio: 0.46\n",
            "Risk-Reward Ratio: 5.13\n",
            "Kelly Criterion: 0.27\n",
            "\n",
            "Trader_6 Metrics:\n",
            "Trader Name: Trader_6\n",
            "Trading Style: Day Trader\n",
            "Asset Class: Forex\n",
            "Total Trades: 63\n",
            "Win Rate (%): 63.49\n",
            "Total Wins: 40\n",
            "Total Losses: 23\n",
            "Profit Factor: 2.32\n",
            "Expectancy (Avg Profit per Trade): 300.49\n",
            "Max Drawdown: 3098.08\n",
            "Standard Deviation: 699.76\n",
            "Sharpe Ratio: 0.43\n",
            "Risk-Reward Ratio: 1.34\n",
            "Kelly Criterion: 0.36\n",
            "\n",
            "Trader_7 Metrics:\n",
            "Trader Name: Trader_7\n",
            "Trading Style: Scalper\n",
            "Asset Class: Forex\n",
            "Total Trades: 66\n",
            "Win Rate (%): 71.21\n",
            "Total Wins: 47\n",
            "Total Losses: 19\n",
            "Profit Factor: 1.95\n",
            "Expectancy (Avg Profit per Trade): 268.47\n",
            "Max Drawdown: 4399.18\n",
            "Standard Deviation: 797.2\n",
            "Sharpe Ratio: 0.34\n",
            "Risk-Reward Ratio: 0.79\n",
            "Kelly Criterion: 0.35\n",
            "\n",
            "Trader_8 Metrics:\n",
            "Trader Name: Trader_8\n",
            "Trading Style: Day Trader\n",
            "Asset Class: Crypto\n",
            "Total Trades: 79\n",
            "Win Rate (%): 43.04\n",
            "Total Wins: 34\n",
            "Total Losses: 45\n",
            "Profit Factor: 3.69\n",
            "Expectancy (Avg Profit per Trade): 262.28\n",
            "Max Drawdown: 3515.79\n",
            "Standard Deviation: 498.5\n",
            "Sharpe Ratio: 0.53\n",
            "Risk-Reward Ratio: 4.89\n",
            "Kelly Criterion: 0.31\n",
            "\n",
            "Trader_9 Metrics:\n",
            "Trader Name: Trader_9\n",
            "Trading Style: Scalper\n",
            "Asset Class: Indices\n",
            "Total Trades: 60\n",
            "Win Rate (%): 75.0\n",
            "Total Wins: 45\n",
            "Total Losses: 15\n",
            "Profit Factor: 6.41\n",
            "Expectancy (Avg Profit per Trade): 341.01\n",
            "Max Drawdown: 1714.77\n",
            "Standard Deviation: 342.58\n",
            "Sharpe Ratio: 1.0\n",
            "Risk-Reward Ratio: 2.14\n",
            "Kelly Criterion: 0.63\n",
            "\n",
            "Trader_10 Metrics:\n",
            "Trader Name: Trader_10\n",
            "Trading Style: Position Trader\n",
            "Asset Class: Stocks\n",
            "Total Trades: 73\n",
            "Win Rate (%): 65.75\n",
            "Total Wins: 48\n",
            "Total Losses: 25\n",
            "Profit Factor: 2.08\n",
            "Expectancy (Avg Profit per Trade): 288.71\n",
            "Max Drawdown: 644.45\n",
            "Standard Deviation: 770.01\n",
            "Sharpe Ratio: 0.37\n",
            "Risk-Reward Ratio: 1.09\n",
            "Kelly Criterion: 0.34\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "import numpy as np\n",
        "import matplotlib.pyplot as plt\n",
        "\n",
        "# Function to calculate trading metrics\n",
        "def calculate_trading_metrics(trader_data):\n",
        "    total_trades = trader_data[\"trades\"]\n",
        "    won_trades = trader_data[\"wonTrades\"]\n",
        "    lost_trades = trader_data[\"lostTrades\"]\n",
        "    win_rate = trader_data[\"wonTradesPercent\"] / 100\n",
        "    avg_win = trader_data[\"averageWin\"]\n",
        "    avg_loss = abs(trader_data[\"averageLoss\"])  # Convert to positive\n",
        "    expectancy = trader_data[\"expectancy\"]\n",
        "\n",
        "    # Calculate Profit Factor\n",
        "    total_winning_profit = won_trades * avg_win\n",
        "    total_losing_loss = lost_trades * avg_loss\n",
        "    profit_factor = (total_winning_profit / total_losing_loss) if total_losing_loss > 0 else None\n",
        "\n",
        "    # Standard Deviation & Variance of Returns\n",
        "    trade_returns = np.array([avg_win] * won_trades + [-avg_loss] * lost_trades)\n",
        "    std_dev = np.std(trade_returns) if total_trades > 1 else 0\n",
        "    variance = np.var(trade_returns) if total_trades > 1 else 0\n",
        "\n",
        "    return {\n",
        "        \"Trader\": trader_data[\"name\"],\n",
        "        \"Total Trades\": total_trades,\n",
        "        \"Win Rate (%)\": round(win_rate * 100, 2),\n",
        "        \"Profit Factor\": round(profit_factor, 2) if profit_factor else 0,\n",
        "        \"Expectancy\": round(expectancy, 2),\n",
        "        \"Standard Deviation\": round(std_dev, 2),\n",
        "        \"Variance\": round(variance, 2),\n",
        "    }\n",
        "\n",
        "# Process all traders\n",
        "def process_traders(trader_list):\n",
        "    return [calculate_trading_metrics(trader) for trader in trader_list]\n",
        "\n",
        "# Generate Charts\n",
        "def generate_charts(trader_metrics):\n",
        "    trader_names = [t[\"Trader\"] for t in trader_metrics]\n",
        "\n",
        "    # Overall Performance Chart\n",
        "    fig, ax = plt.subplots(figsize=(12, 6))\n",
        "    ax.bar(trader_names, [t[\"Expectancy\"] for t in trader_metrics], color=\"blue\", label=\"Expectancy\")\n",
        "    ax.set_ylabel(\"Expectancy (Avg Profit per Trade)\")\n",
        "    ax.set_title(\"Trader Expectancy Comparison\")\n",
        "    ax.legend()\n",
        "    plt.xticks(rotation=45)\n",
        "    plt.tight_layout()\n",
        "    plt.show()\n",
        "\n",
        "    # Individual Trader Subcharts (Std Dev & Variance)\n",
        "    fig, axes = plt.subplots(5, 2, figsize=(8, 8))  # 10 subplots (5 rows, 2 cols)\n",
        "    axes = axes.flatten()\n",
        "\n",
        "    for i, trader in enumerate(trader_metrics):\n",
        "        axes[i].bar([\"Std Dev\", \"Variance\"], [trader[\"Standard Deviation\"], trader[\"Variance\"]], color=[\"red\", \"orange\"])\n",
        "        axes[i].set_title(trader[\"Trader\"])\n",
        "        axes[i].set_ylabel(\"Value\")\n",
        "        axes[i].set_ylim(0, max(trader[\"Standard Deviation\"], trader[\"Variance\"]) * 1.2)  # Adjusted scale\n",
        "\n",
        "    plt.tight_layout()\n",
        "    plt.show()\n",
        "\n",
        "# Main Execution\n",
        "if __name__ == \"__main__\":\n",
        "    trader_metrics = process_traders(TRADERS_DB)\n",
        "    generate_charts(trader_metrics)\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 1000
        },
        "id": "HcEtEbrTA1Re",
        "outputId": "e8052037-73e2-497c-b1d5-b751901ccfb2"
      },
      "execution_count": 4,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 1200x600 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 800x800 with 10 Axes>"
            ],
            "image/png": "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sHnz5qisrNSIcXd3x6lTpzB27Fhp7OTJk3Van1qtxtq1a+Hm5oYXX3wRANCjRw9cunQJnTp1eurrAgIC4OLigqSkJPznP//BsGHDqm0sqP4MHz4c0dHR2LZtGzZv3oxp06ZBJpPh2LFjGDJkCMaMGQPg0c/78uXL8PDw0Gr+48ePw9XVFXPnzpXGrl+/rtUcnTt3hkKhQFpaGiZOnFhteY8ePZCUlAQHBwcolUqt5iZqClgfqK5YIxonNhVUK3fv3sWwYcMwYcIEvPDCC7CxscHp06exbNkyDBkyRIpr37490tLS0KtXL8jlctjZ2SE6Ohrjxo2Dr68vevXqha1btyIzMxMdOnSo1Xrz8vJQWlqKCxcuYPXq1fj++++RnJwMc3NzAMC8efPw+uuvo127dnjrrbdgZmaGc+fO4cKFC1i8eLE016hRo5CQkIDLly/j4MGD+v+QqNasra0RFhaGOXPmQKVSSd9kdu7cGTt37sTx48dhZ2eHlStX4tatW1oXjM6dOyMnJwfbt2/HSy+9hOTkZOzevVurOSwtLTF79mzExsbCwsICvXr1wu3bt5GZmYmIiAiMHj0ay5cvx5AhQ7Bw4UK0bdsW169fx65duxAbG1vtcohEpor1gfSNNaKRMvZJHdQ4PHjwQLz33nuiR48ewtbWVlhZWYkuXbqIuLg4UVpaKsXt3btXdOrUSTRr1kzjkoF//etfhb29vbC2thbh4eEiNja2VifiVT2srKyEu7u7+POf/yyuXLlSLT4lJUUEBAQIhUIhlEql6Nmzp9iwYYNGzE8//SRdyvDxE6fIOI4fPy4AiNdee00au3v3rhgyZIiwtrYWDg4OIi4uTowdO1YMGTJEigkMDBTR0dHV5sMTJ+HNmjVLtG7dWlhbW4uwsDCxatUqYWtrKy2vulzg41atWqXxe1tZWSkWL14sXF1dRfPmzUW7du00Tvq8efOmGDt2rLC3txdyuVx06NBBTJo0SRQWFtb1YyFqdFgfyBBYIxofmRD/d1YTERERERFRHfDqT0REREREpBM2FUREREREpBM2FUREREREpBM2FUREREREpBM2FUREREREpBM2FUREREREpBM2FUREREREpBM2FUREREREpBM2FUREREREpBM2FUREREREpBM2FUREREREpBM2FUREREREpBM2FUREREREpBM2FUREREREpBM2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6YQnatcjtVqN3Nxc2NjYQCaTGTsdIiIAj+7gW1RUBGdnZ5iZ8bsmY2B9IKKGqrY1gk1FPcrNzYWLi4ux0yAiqtEvv/yCtm3bGjuNJon1gYgaumfVCDYV9cjGxgbAox+KUqk0cjZERI+oVCq4uLhI2yiqf6wPRNRQ1bZGsKmoR1W7tJVKJYsGETU4POzGeFgfiKihe1aN4MGzRERERESkEzYVRERERESkEzYVRERERESkEzYVRERERESkEzYVRERERESkEzYVRERERESkEzYVRERERESkEzYVRERERESkEzYVRERERESkEzYVRERERESkEzYVRERERESkEzYVRERERESkEzYVRERERESkk2bGToCIjGSbzNgZkKGMEsbOgIgaM9YH02agGsE9FUREREREpBM2FUREREREpBM2FUREREREpBM2FUREREREpBM2FUREREREpBM2FUREREREpBM2FUREREREpBM2FUREREREpBM2FUREREREpBM2FUREREREpBM2FUREREREpBM2FUREREREpBM2FUREREREpBOjNhVHjhzBn/70Jzg7O0Mmk2HPnj0ay4UQmDdvHp577jkoFAr0798fV65c0Yi5d+8eRo8eDaVSiZYtWyIiIgLFxcUaMT/++CN69+4NS0tLuLi4YNmyZdVy+fLLL9G1a1dYWlrC09MTX3/9tda5EBERERE1RXVqKh4+fIhvv/0Wn3zyCYqKigAAubm51f4x/ywlJSXw8vLC+vXra1y+bNkyrF27FgkJCTh16hRatGiB4OBgPHjwQIoZPXo0MjMzkZqaiv379+PIkSOYPHmytFylUmHAgAFwdXVFRkYGli9fjvnz52PDhg1SzPHjxzFy5EhERETghx9+wNChQzF06FBcuHBBq1yIiEh/NYKIiBoPmRBCaPOC69evY+DAgcjJyUFZWRkuX76MDh06IDo6GmVlZUhISKhbIjIZdu/ejaFDhwJ4tGfA2dkZM2fOxLvvvgsAKCwshKOjIxITEzFixAhcvHgRHh4e+O9//wtfX18AQEpKCl577TXcuHEDzs7O+PjjjzF37lzk5eXBwsICAPDee+9hz549yMrKAgCEhYWhpKQE+/fvl/J5+eWX4e3tjYSEhFrlUhsqlQq2trYoLCyEUqms0+dEpDfbZMbOgAxllFabdb1umwxVI0wd6wM1KKwPps1ANULrPRXR0dHw9fXF/fv3oVAopPE33ngDaWlp2k73VNnZ2cjLy0P//v2lMVtbW/j5+eHEiRMAgBMnTqBly5ZSQwEA/fv3h5mZGU6dOiXF9OnTR2ooACA4OBiXLl3C/fv3pZjH11MVU7We2uRSk7KyMqhUKo0HEZEpq68aQUREDUszbV9w9OhRHD9+XOMf6QDQvn17/Prrr3pLLC8vDwDg6OioMe7o6Cgty8vLg4ODg8byZs2aoVWrVhoxbm5u1eaoWmZnZ4e8vLxnrudZudRkyZIlWLBgwbPfLBGRiaivGkFERA2L1nsq1Go1Kisrq43fuHEDNjY2eknKVMyZMweFhYXS45dffjF2SkREBsUaQUTUNGndVAwYMACrV6+WnstkMhQXFyM+Ph6vvfaa3hJzcnICANy6dUtj/NatW9IyJycn5Ofnayx/+PAh7t27pxFT0xyPr+NpMY8vf1YuNZHL5VAqlRoPIiJTVl81goiIGhatm4oVK1bg2LFj8PDwwIMHDzBq1Chpt/bSpUv1lpibmxucnJw0jsFVqVQ4deoU/P39AQD+/v4oKChARkaGFJOeng61Wg0/Pz8p5siRI6ioqJBiUlNT0aVLF9jZ2UkxTx7rm5qaKq2nNrkQEVH91QgiImpYtD6nom3btjh37hy2b9+OH3/8EcXFxYiIiMDo0aM1TsqrjeLiYly9elV6np2djbNnz6JVq1Zo164dpk+fjsWLF6Nz585wc3PDBx98AGdnZ+kKUe7u7hg4cCAmTZqEhIQEVFRUICoqCiNGjICzszMAYNSoUViwYAEiIiIwe/ZsXLhwAWvWrMGqVauk9UZHRyMwMBArVqxASEgItm/fjtOnT0uXnZXJZM/MhYiI9FsjiIio8dC6qQAenQw9ZswYnVd++vRpvPLKK9LzmJgYAEB4eDgSExMRGxuLkpISTJ48GQUFBfjjH/+IlJQUWFpaSq/ZunUroqKi0K9fP5iZmSE0NBRr166Vltva2uKbb75BZGQkfHx8YG9vj3nz5mncyyIgIADbtm1DXFwc3n//fXTu3Bl79uxB9+7dpZja5EJERPqrEURE1HhofZ+KzZs3/+7ysWPH6pSQKeN1yKlB4XXITZcR71PBGlE3rA/UoLA+mDYD1Qit91RER0drPK+oqEBpaSksLCxgZWXFgkFE1ITpq0YsWbIEu3btQlZWFhQKBQICArB06VJ06dJFinnw4AFmzpyJ7du3o6ysDMHBwfjoo480Lv+dk5ODadOm4eDBg7C2tkZ4eDiWLFmCZs3+f/k7dOgQYmJikJmZCRcXF8TFxWHcuHEa+axfvx7Lly9HXl4evLy88I9//AM9e/bUKhciIlOm9Yna9+/f13gUFxfj0qVL+OMf/4h//etfhsiRiIgaCX3ViMOHDyMyMhInT55EamoqKioqMGDAAJSUlEgxM2bMwL59+/Dll1/i8OHDyM3NxZtvviktr6ysREhICMrLy3H8+HF88cUXSExMxLx586SY7OxshISE4JVXXsHZs2cxffp0TJw4EQcOHJBikpKSEBMTg/j4eJw5cwZeXl4IDg7WuPrgs3IhIjJ1Wh/+9DSnT5/GmDFjkJWVpY/pTBJ3b1ODwt3bpsuIhz89ja414vbt23BwcMDhw4fRp08fFBYWok2bNti2bRveeustAEBWVhbc3d1x4sQJvPzyy/jPf/6D119/Hbm5udIeg4SEBMyePRu3b9+GhYUFZs+ejeTkZFy4cEFa14gRI1BQUICUlBQAgJ+fH1566SWsW7cOwKN7cbi4uOCdd97Be++9V6tcnoX1gRoU1gfTZqAaofWeiqdp1qwZcnNz9TUdERGZEF1rRGFhIQCgVatWAICMjAxUVFSgf//+UkzXrl3Rrl07nDhxAgBw4sQJeHp6ahyCFBwcDJVKhczMTCnm8TmqYqrmKC8vR0ZGhkaMmZkZ+vfvL8XUJpcnlZWVQaVSaTyIiBozrc+p2Lt3r8ZzIQRu3ryJdevWoVevXnpLjIiIGh9D1Ai1Wo3p06ejV69e0lX58vLyYGFhgZYtW2rEOjo6Ii8vT4p58pyGqufPilGpVPjtt99w//59VFZW1hhTtdelNrk8acmSJViwYEEtPwEiooZP66biyfsyyGQytGnTBn379sWKFSv0lRcRETVChqgRkZGRuHDhAr777js9ZNgwzJkzR7qMOvDo8AIXFxcjZkREpButmwq1Wm2IPIiIyATou0ZERUVh//79OHLkCNq2bSuNOzk5oby8HAUFBRp7CG7dugUnJycp5vvvv9eY79atW9Kyqv9WjT0eo1QqoVAoYG5uDnNz8xpjHp/jWbk8SS6XQy6Xa/FJEBE1bHo7p4KIiEhfhBCIiorC7t27kZ6eDjc3N43lPj4+aN68OdLS0qSxS5cuIScnB/7+/gAAf39/nD9/XuMqTampqVAqlfDw8JBiHp+jKqZqDgsLC/j4+GjEqNVqpKWlSTG1yYWIyNTVak/F47ton2XlypV1ToaIiBofQ9SIyMhIbNu2DV999RVsbGykcxNsbW2hUChga2uLiIgIxMTEoFWrVlAqlXjnnXfg7+8vXW1pwIAB8PDwwNtvv41ly5YhLy8PcXFxiIyMlPYSTJ06FevWrUNsbCwmTJiA9PR07NixA8nJyRrvLzw8HL6+vujZsydWr16NkpISjB8/XsrpWbkQEZm6WjUVP/zwQ60mk8l4CTIioqbGEDXi448/BgAEBQVpjG/atEm6Md2qVatgZmaG0NBQjRvOVTE3N8f+/fsxbdo0+Pv7o0WLFggPD8fChQulGDc3NyQnJ2PGjBlYs2YN2rZti88++wzBwcFSTFhYGG7fvo158+YhLy8P3t7eSElJ0Th5+1m5EBGZOr3dp4KejdchpwaF1yE3XQ3wPhX0+/gzoAaF9cG0NfT7VBARERERUdOk9dWfgEd3Rt2xYwdycnJQXl6usWzXrl16SYyIiBon1ggioqZH6z0V27dvR0BAAC5evIjdu3ejoqICmZmZSE9Ph62trSFyJCKiRoI1goioadK6qfjwww+xatUq7Nu3DxYWFlizZg2ysrIwfPhwtGvXzhA5EhFRI8EaQUTUNGndVPz8888ICQkB8Oj63SUlJZDJZJgxYwY2bNig9wSJiKjxYI0gImqatG4q7OzsUFRUBAD4wx/+gAsXLgAACgoKUFpaqt/siIioUWGNICJqmmrdVFQVhj59+iA1NRUAMGzYMERHR2PSpEkYOXIk+vXrZ5gsiYioQWONICJq2mp99acXXngBL730EoYOHYphw4YBAObOnYvmzZvj+PHjCA0NRVxcnMESJSKihos1goioaav1ze+OHj2KTZs2YefOnVCr1QgNDcXEiRPRu3dvQ+doMnhzI2pQeHMj02WEm9+xRuiG9YEaFNYH02bsm9/17t0bGzduxM2bN/GPf/wD165dQ2BgIJ5//nksXboUeXl5WiVIRESmgzWCiKhp0/pE7RYtWmD8+PE4fPgwLl++jGHDhmH9+vVo164dBg8ebIgciYiokWCNICJqmrRuKh7XqVMnvP/++4iLi4ONjQ2Sk5P1lRcRETVyrBFERE1HrU/UftKRI0ewceNG/Pvf/4aZmRmGDx+OiIgIfeZGRESNFGsEEVHTolVTkZubi8TERCQmJuLq1asICAjA2rVrMXz4cLRo0cJQORIRUSPAGkFE1HTVuqkYNGgQvv32W9jb22Ps2LGYMGECunTpYsjciIiokWCNICJq2mrdVDRv3hw7d+7E66+/DnNzc0PmREREjQxrBBFR01brpmLv3r2GzIOIiBox1ggioqZNp6s/ERERERERsakgIiIiIiKdsKkgIiIiIiKdsKkgIiIiIiKdsKkgIiIiIiKdsKkgIiIiIiKdsKkgIiIiIiKdsKkgIiIiIiKdsKkgIiIiIiKdsKkgIiIiIiKdsKkgIiIiIiKdsKkgIiIiIiKdsKkgIiIiIiKdsKkgIiIiIiKdsKkgIiIiIiKdsKkgIiIiIiKdsKkgIiIiIiKdsKkgIiIiIiKdsKkgIiIiIiKdsKkgIiIiIiKdsKkgIiIiIiKdsKkgIiIiIiKdsKkgIiIiIiKdsKnQ0vr169G+fXtYWlrCz88P33//vbFTIiKiBoI1goiaKjYVWkhKSkJMTAzi4+Nx5swZeHl5ITg4GPn5+cZOjYiIjIw1goiaMjYVWli5ciUmTZqE8ePHw8PDAwkJCbCyssLGjRuNnRoRERkZawQRNWXNjJ1AY1FeXo6MjAzMmTNHGjMzM0P//v1x4sSJGl9TVlaGsrIy6XlhYSEAQKVSGTZZotooNXYCZDBabmOqtklCCENk0yRoWyNYH6hBY30wbQaqEWwqaunOnTuorKyEo6OjxrijoyOysrJqfM2SJUuwYMGCauMuLi4GyZGICAAwybZOLysqKoKtbd1e29RpWyNYH4jIaAxUI9hUGNCcOXMQExMjPVer1bh37x5at24NmUxmxMwaLpVKBRcXF/zyyy9QKpXGTodMAH+nnk0IgaKiIjg7Oxs7lSaD9aFu+PdM+sbfqWerbY1gU1FL9vb2MDc3x61btzTGb926BScnpxpfI5fLIZfLNcZatmxpqBRNilKp5B836RV/p34f91DoRtsawfqgG/49k77xd+r31aZG8ETtWrKwsICPjw/S0tKkMbVajbS0NPj7+xsxMyIiMjbWCCJq6rinQgsxMTEIDw+Hr68vevbsidWrV6OkpATjx483dmpERGRkrBFE1JSxqdBCWFgYbt++jXnz5iEvLw/e3t5ISUmpdmIe1Z1cLkd8fHy1wwKI6oq/U1RfWCMMj3/PpG/8ndIfmeA1BImIiIiISAc8p4KIiIiIiHTCpoKIiIiIiHTCpoKIiIiIiHTCpoKMYv78+fD29jZ2GmRCZDIZ9uzZY+w0iEhHrA9kCKwRhsemgmrt9u3bmDZtGtq1awe5XA4nJycEBwfj2LFjUoy+/mivXbsGmUwmPWxsbNCtWzdERkbiypUrOs9PxvGnP/0JAwcOrHHZ0aNHIZPJ8OOPP9Zp7ps3b2LQoEG6pEdEdcT6QPrAGtG48ZKyVGuhoaEoLy/HF198gQ4dOuDWrVtIS0vD3bt3DbbOb7/9Ft26dUNpaSnOnz+PNWvWwMvLC/v27UO/fv0Mtl4yjIiICISGhuLGjRto27atxrJNmzbB19cXL7zwglZzlpeXw8LC4ql3ticiw2N9IH1gjWjkBFEt3L9/XwAQhw4demqMq6urACA9XF1dpWVLliwRDg4OwtraWkyYMEHMnj1beHl5PXWu7OxsAUD88MMPGuOVlZUiKChIuLq6iocPH0rje/bsES+++KKQy+XCzc1NzJ8/X1RUVAghhBg5cqQYPny4xjzl5eWidevW4osvvqj9h0A6q6ioEI6OjmLRokUa40VFRcLa2losXrxYjBgxQjg7OwuFQiG6d+8utm3bphEbGBgoIiMjRXR0tGjdurUICgoSQggBQOzevVuKi42NFZ07dxYKhUK4ubmJuLg4UV5eLi2Pj48XXl5eYvPmzcLV1VUolUoRFhYmVCqVFFNZWSmWLl0qOnbsKCwsLISLi4tYvHixtDwnJ0cMGzZM2NraCjs7OzF48GCRnZ2tx0+MqOFjfSB9YY1o3NhUUK1UVFQIa2trMX36dPHgwYMaY/Lz8wUAsWnTJnHz5k2Rn58vhBAiKSlJyOVy8dlnn4msrCwxd+5cYWNjU6eiIYQQu3fvFgDEqVOnhBBCHDlyRCiVSpGYmCh+/vln8c0334j27duL+fPnCyGE2L9/v1AoFKKoqEiaY9++fUKhUGhsHKh+zJo1S3Ts2FGo1WppbOPGjUKhUIhr166J5cuXix9++EH8/PPPYu3atcLc3Fz6WQvxqGBYW1uLWbNmiaysLJGVlSWEqF4wFi1aJI4dOyays7PF3r17haOjo1i6dKm0PD4+XlhbW4s333xTnD9/Xhw5ckQ4OTmJ999/X4qJjY0VdnZ2IjExUVy9elUcPXpUfPrpp0KIR//wcHd3FxMmTBA//vij+Omnn8SoUaNEly5dRFlZmaE+PqIGh/WB9Ik1ovFiU0G1tnPnTmFnZycsLS1FQECAmDNnjjh37pxGzJN/tEII4e/vL/785z9rjPn5+dW5aFy8eFEAEElJSUIIIfr16yc+/PBDjZgtW7aI5557TgjxqODZ29uLzZs3S8tHjhwpwsLCnvWWyQCqfn4HDx6Uxnr37i3GjBlTY3xISIiYOXOm9DwwMFC8+OKL1eJq+t173PLly4WPj4/0PD4+XlhZWWn8w2HWrFnCz89PCCGESqUScrlcKhBP2rJli+jSpYtG4SsrKxMKhUIcOHDgqXkQmSLWB9IX1ojGiydqU62FhoYiNzcXe/fuxcCBA3Ho0CH06NEDiYmJv/u6ixcvws/PT2PM39+/znmI/7sJvEwmAwCcO3cOCxcuhLW1tfSYNGkSbt68idLSUjRr1gzDhw/H1q1bAQAlJSX46quvMHr06DrnQHXXtWtXBAQEYOPGjQCAq1ev4ujRo4iIiEBlZSUWLVoET09PtGrVCtbW1jhw4ABycnI05vDx8XnmepKSktCrVy84OTnB2toacXFx1eZp3749bGxspOfPPfcc8vPzATz6vS0rK3vqsdnnzp3D1atXYWNjI/3etWrVCg8ePMDPP/+s1WdC1NixPpC+sEY0XjxRm7RiaWmJV199Fa+++io++OADTJw4EfHx8Rg3bly95XDx4kUAgJubGwCguLgYCxYswJtvvlljvgAwevRoBAYGIj8/H6mpqVAoFE+9wgQZXkREBN555x2sX78emzZtQseOHREYGIilS5dizZo1WL16NTw9PdGiRQtMnz4d5eXlGq9v0aLF785/4sQJjB49GgsWLEBwcDBsbW2xfft2rFixQiOuefPmGs9lMhnUajUAQKFQ/O46iouL4ePjI/1j5HFt2rT53dcSmSLWB9IX1ojGiU0F6cTDw0PjEoHNmzdHZWWlRoy7uztOnTqFsWPHSmMnT56s0/rUajXWrl0LNzc3vPjiiwCAHj164NKlS+jUqdNTXxcQEAAXFxckJSXhP//5D4YNG1ZtY0H1Z/jw4YiOjsa2bduwefNmTJs2DTKZDMeOHcOQIUMwZswYAI9+3pcvX4aHh4dW8x8/fhyurq6YO3euNHb9+nWt5ujcuTMUCgXS0tIwceLEast79OiBpKQkODg4QKlUajU3UVPA+kB1xRrROLGpoFq5e/cuhg0bhgkTJuCFF16AjY0NTp8+jWXLlmHIkCFSXPv27ZGWloZevXpBLpfDzs4O0dHRGDduHHx9fdGrVy9s3boVmZmZ6NChQ63Wm5eXh9LSUly4cAGrV6/G999/j+TkZJibmwMA5s2bh9dffx3t2rXDW2+9BTMzM5w7dw4XLlzA4sWLpblGjRqFhIQEXL58GQcPHtT/h0S1Zm1tjbCwMMyZMwcqlUr6JrNz587YuXMnjh8/Djs7O6xcuRK3bt3SumB07twZOTk52L59O1566SUkJydj9+7dWs1haWmJ2bNnIzY2FhYWFujVqxdu376NzMxMREREYPTo0Vi+fDmGDBmChQsXom3btrh+/Tp27dqF2NjYapdDJDJVrA+kb6wRjZSxT+qgxuHBgwfivffeEz169BC2trbCyspKdOnSRcTFxYnS0lIpbu/evaJTp06iWbNmGpcM/Otf/yrs7e2FtbW1CA8PF7GxsbU6Ea/qYWVlJdzd3cWf//xnceXKlWrxKSkpIiAgQCgUCqFUKkXPnj3Fhg0bNGJ++ukn6VKGj584RcZx/PhxAUC89tpr0tjdu3fFkCFDhLW1tXBwcBBxcXFi7NixYsiQIVJMYGCgiI6OrjYfnjgJb9asWaJ169bC2tpahIWFiVWrVglbW1tpedXlAh+3atUqjd/byspKsXjxYuHq6iqaN28u2rVrp3HS582bN8XYsWOFvb29kMvlokOHDmLSpEmisLCwrh8LUaPD+kCGwBrR+MiE+L+zmoiIiIiIiOqAV38iIiIiIiKdsKkgIiIiIiKdsKkgIiIiIiKdsKkgIiIiIiKdsKkgIiIiIiKdsKkgIiIiIiKdsKkgIiIiIiKdsKkgIiIiIiKdsKkgIiIiIiKdsKkgIiIiIiKdsKkgIiIiIiKdsKkgIiIiIiKdsKkgIiIiIiKdsKkgIiIiIiKdsKkgIiIiIiKdsKkgIiIiIiKdsKkgIiIiIiKdsKkgakSCgoIQFBRk7DSIiKgBYo0gY2JTQaQFmUxWq8ehQ4eMnapezZ8/v8b3aWlpaezUiIgajKZaI6okJSXB398fLVq0QMuWLREQEID09HRjp0X1pJmxEyBqTLZs2aLxfPPmzUhNTa027u7uXp9p1ZuPP/4Y1tbW0nNzc3MjZkNE1LA05Roxf/58LFy4EG+99RbGjRuHiooKXLhwAb/++quxU6N6wqaCSAtjxozReH7y5EmkpqZWG39SaWkprKysDJma1tRqNcrLy7Xa2/DWW2/B3t7egFkRETVeTbVGnDx5EgsXLsSKFSswY8aMesiOGiIe/kSkZ0FBQejevTsyMjLQp08fWFlZ4f333wcAfPXVVwgJCYGzszPkcjk6duyIRYsWobKysto8GzZsQMeOHaFQKNCzZ08cPXq0xvWVlZUhPj4enTp1glwuh4uLC2JjY1FWVqYRJ5PJEBUVha1bt6Jbt26Qy+VISUnR6r0JIaBSqSCE0Op1RET0iCnWiNWrV8PJyQnR0dEQQqC4uFjLT4VMAfdUEBnA3bt3MWjQIIwYMQJjxoyBo6MjACAxMRHW1taIiYmBtbU10tPTMW/ePKhUKixfvlx6/eeff44pU6YgICAA06dPx//+9z8MHjwYrVq1gouLixSnVqsxePBgfPfdd5g8eTLc3d1x/vx5rFq1CpcvX8aePXs08kpPT8eOHTsQFRUFe3t7tG/fXqv31aFDBxQXF6NFixYYOnQoVqxYIb03IiKqHVOrEWlpaQgICMDatWuxePFi3L17F05OTpg7dy6ioqJ0/ryokRBEVGeRkZHiyT+jwMBAAUAkJCRUiy8tLa02NmXKFGFlZSUePHgghBCivLxcODg4CG9vb1FWVibFbdiwQQAQgYGB0tiWLVuEmZmZOHr0qMacCQkJAoA4duyYNAZAmJmZiczMTK3f5+rVq0VUVJTYunWr2Llzp4iOjhbNmjUTnTt3FoWFhVrPR0TUFDSFGnHv3j0BQLRu3VpYW1uL5cuXi6SkJDFw4MCnvk8yTTz8icgA5HI5xo8fX21coVBI/19UVIQ7d+6gd+/eKC0tRVZWFgDg9OnTyM/Px9SpU2FhYSHFjxs3Dra2thrzffnll3B3d0fXrl1x584d6dG3b18AwMGDBzXiAwMD4eHhofX7iY6Oxj/+8Q+MGjUKoaGhWL16Nb744gtcuXIFH330kdbzERE1ZaZUI6oOdbp79y4+++wzvPvuuxg+fDiSk5Ph4eGBxYsXazUfNV5sKogM4A9/+IPGxr5KZmYm3njjDdja2kKpVKJNmzbSCXyFhYUAgOvXrwMAOnfurPHa5s2bo0OHDhpjV65cQWZmJtq0aaPxeP755wEA+fn5GvFubm76eYMARo0aBScnJ3z77bd6m5OIqCkwpRpR1Qg1b94cb731ljRuZmaGsLAw3LhxAzk5OVrPS40Pz6kgMoDHv22qUlBQgMDAQCiVSixcuBAdO3aEpaUlzpw5g9mzZ0OtVmu9HrVaDU9PT6xcubLG5Y8fW/u0vHTh4uKCe/fu6XVOIiJTZ0o1olWrVrC0tETLli2rXWbcwcEBAHD//n20a9dO67mpcWFTQVRPDh06hLt372LXrl3o06ePNJ6dna0R5+rqCuDRN0xVu6gBoKKiAtnZ2fDy8pLGOnbsiHPnzqFfv36QyWQGfgeahBC4du0aXnzxxXpdLxGRKWqsNcLMzAze3t7473//i/Lyco09MLm5uQCANm3aGGTd1LDw8CeielL1DY547HKs5eXl1c5J8PX1RZs2bZCQkIDy8nJpPDExEQUFBRqxw4cPx6+//opPP/202vp+++03lJSU6CX327dvVxv7+OOPcfv2bQwcOFAv6yAiasoac40ICwtDZWUlvvjiC2nswYMH2Lp1Kzw8PODs7KyX9VDDxj0VRPUkICAAdnZ2CA8Px1/+8hfIZDJs2bKl2j0fmjdvjsWLF2PKlCno27cvwsLCkJ2djU2bNlU7Xvbtt9/Gjh07MHXqVBw8eBC9evVCZWUlsrKysGPHDhw4cAC+vr465+7q6oqwsDB4enrC0tIS3333HbZv3w5vb29MmTJF5/mJiJq6xlwjpkyZgs8++wyRkZG4fPky2rVrhy1btuD69evYt2+fzvNT48CmgqietG7dGvv378fMmTMRFxcHOzs7jBkzBv369UNwcLBG7OTJk1FZWYnly5dj1qxZ8PT0xN69e/HBBx9oxJmZmWHPnj1YtWoVNm/ejN27d8PKygodOnRAdHS0dDKerkaPHo3jx4/j3//+Nx48eABXV1fExsZi7ty5De4usEREjVFjrhEKhQLp6emIjY3Fxo0bUVJSAm9vbyQnJ1fLnUyXTDzZAhMREREREWmB51QQEREREZFOePgTURN27949jRP9nmRubs6rdhARNVGsEaQNHv5E1IQFBQXh8OHDT13u6uqKa9eu1V9CRETUYLBGkDbYVBA1YRkZGbh///5TlysUCvTq1aseMyIiooaCNYK0waaCiIiIiIh0whO1iYiIiIhIJzxRux6p1Wrk5ubCxsYGMpnM2OkQEQF4dAffoqIiODs7w8yM3zUZA+sDETVUta0RbCrqUW5uLlxcXIydBhFRjX755Re0bdvW2Gk0SawPRNTQPatGsKmoRzY2NgAe/VCUSqWRsyEiekSlUsHFxUXaRlH9Y30gooaqtjWCTUU9qtqlrVQqWTSIqMHhYTfGw/pARA3ds2oED54lIiIiIiKdsKkgIiIiIiKdsKkgIiIiIiKdsKkgIiIiIiKdsKkgIiIiIiKdsKkgIiIiIiKdsKkgIiIiIiKdsKkgIiIiIiKdsKkgIiIiIiKdsKkgIiIiIiKdsKkgIiIiIiKdsKkgIiIiIiKdsKkgIiIiIiKdNDN2AkRkJNtkxs6ADGWUMHYGRNSYsT6YNgPVCO6pICIiIiIinbCpICIiIiIinbCpICIiIiIinbCpICIiIiIinbCpICIiIiIinbCpICIiIiIinbCpICIiIiIinbCpICIiIiIinbCpICIiIiIinbCpICKiBu9vf/sbZDIZpk+fLo09ePAAkZGRaN26NaytrREaGopbt25pvC4nJwchISGwsrKCg4MDZs2ahYcPH2rEHDp0CD169IBcLkenTp2QmJhYbf3r169H+/btYWlpCT8/P3z//fcay2uTCxGRKWNTQUREDdp///tffPLJJ3jhhRc0xmfMmIF9+/bhyy+/xOHDh5Gbm4s333xTWl5ZWYmQkBCUl5fj+PHj+OKLL5CYmIh58+ZJMdnZ2QgJCcErr7yCs2fPYvr06Zg4cSIOHDggxSQlJSEmJgbx8fE4c+YMvLy8EBwcjPz8/FrnQkRk6hp0U7FkyRK89NJLsLGxgYODA4YOHYpLly5pxDSkb6qIiEi/iouLMXr0aHz66aews7OTxgsLC/H5559j5cqV6Nu3L3x8fLBp0yYcP34cJ0+eBAB88803+Omnn/DPf/4T3t7eGDRoEBYtWoT169ejvLwcAJCQkAA3NzesWLEC7u7uiIqKwltvvYVVq1ZJ61q5ciUmTZqE8ePHw8PDAwkJCbCyssLGjRtrnQsRkalr0E3F4cOHERkZiZMnTyI1NRUVFRUYMGAASkpKpJiG9E0VERHpV2RkJEJCQtC/f3+N8YyMDFRUVGiMd+3aFe3atcOJEycAACdOnICnpyccHR2lmODgYKhUKmRmZkoxT84dHBwszVFeXo6MjAyNGDMzM/Tv31+KqU0uRESmrpmxE/g9KSkpGs8TExPh4OCAjIwM9OnTR/p2aNu2bejbty8AYNOmTXB3d8fJkyfx8ssvS99Uffvtt3B0dIS3tzcWLVqE2bNnY/78+bCwsND4pgoA3N3d8d1332HVqlUIDg4GoPlNFfDo263k5GRs3LgR7733Xj1+KkRETcP27dtx5swZ/Pe//622LC8vDxYWFmjZsqXGuKOjI/Ly8qSYxxuKquVVy34vRqVS4bfffsP9+/dRWVlZY0xWVlatc3lSWVkZysrKpOcqlarGOCKixsJgeyoePnyIb7/9Fp988gmKiooAALm5uSguLq7znIWFhQCAVq1aAWhY31TVpKysDCqVSuNBRGTq9LH9/+WXXxAdHY2tW7fC0tLSUKkazZIlS2Brays9XFxcjJ0SEZFODNJUXL9+HZ6enhgyZAgiIyNx+/ZtAMDSpUvx7rvv1mlOtVqN6dOno1evXujevTuA+vum6s6dO0/9pupp30IBLBpE1PToa/ufkZGB/Px89OjRA82aNUOzZs1w+PBhrF27Fs2aNYOjoyPKy8tRUFCg8bpbt27ByckJAODk5FTtHLuq58+KUSqVUCgUsLe3h7m5eY0xj8/xrFyeNGfOHBQWFkqPX375pdafDRFRQ2SQpiI6Ohq+vr64f/8+FAqFNP7GG28gLS2tTnNGRkbiwoUL2L59u77SNDgWDSJqavS1/e/Xrx/Onz+Ps2fPSg9fX1+MHj1a+v/mzZtrzHnp0iXk5OTA398fAODv74/z589rnPuWmpoKpVIJDw8PKebJvFJTU6U5LCws4OPjoxGjVquRlpYmxfj4+DwzlyfJ5XIolUqNBxFRY2aQcyqOHj2K48ePw8LCQmO8ffv2+PXXX7WeLyoqCvv378eRI0fQtm1bafzxb4ce31vx5DdIT16lSdtvqszNzZ/5TVVN5HI55HK51u+XiKix0tf238bGRtorXaVFixZo3bq1NB4REYGYmBi0atUKSqUS77zzDvz9/fHyyy8DAAYMGAAPDw+8/fbbWLZsGfLy8hAXF4fIyEhp2zx16lSsW7cOsbGxmDBhAtLT07Fjxw4kJydL642JiUF4eDh8fX3Rs2dPrF69GiUlJdI5dra2ts/MhYjI1BlkT4VarUZlZWW18Rs3bsDGxqbW8wghEBUVhd27dyM9PR1ubm4ay2vz7VB9fVNFRET62/7XxqpVq/D6668jNDQUffr0gZOTE3bt2iUtNzc3x/79+2Fubg5/f3+MGTMGY8eOxcKFC6UYNzc3JCcnIzU1FV5eXlixYgU+++wz6SIdABAWFoa///3vmDdvHry9vXH27FmkpKRoHBL7rFyIiEydTAgh9D1pWFgYbG1tsWHDBtjY2ODHH39EmzZtMGTIELRr1w6bNm2q1Tx//vOfsW3bNnz11Vfo0qWLNG5rayvtVp82bRq+/vprJCYmSt8OAcDx48cBPLqkrLe3N5ydnaVvqt5++21MnDgRH374IYBHl5Tt3r07IiMjpW+q/vKXvyA5OVkqLElJSQgPD8cnn3wifVO1Y8cOZGVlVTvX4mlUKhVsbW1RWFjIXd1kfNtkxs6ADGWUdpt1fW6b9LX9b2pYH6hBYX0wbQaqEQZpKm7cuIHg4GAIIXDlyhX4+vriypUrsLe3x5EjR+Dg4FCreWSymn+pN23ahHHjxgF4dPO7mTNn4l//+hfKysoQHByMjz76SOOwpOvXr2PatGk4dOgQWrRogfDwcPztb39Ds2b//+ivQ4cOYcaMGfjpp5/Qtm1bfPDBB9I6qqxbtw7Lly9HXl4evL29sXbtWvj5+dX6c2HRoAaFRcN0GbGp0Nf2v6lhfaAGhfXBtDWmpgJ4dEnB7du348cff0RxcTF69OiB0aNHa5y419SwaFCDwqJhuozYVADc/tcF6wM1KKwPps1ANcJgN79r1qwZxowZY6jpiYiogeL2n4io6TFIU7F58+bfXT527FhDrJaIiIyM238ioqbJIE1FdHS0xvOKigqUlpbCwsICVlZWLCpERCaK238ioqbJIJeUvX//vsajuLgYly5dwh//+Ef861//MsQqiYioAeD2n4ioaTJIU1GTzp07429/+1u1b7GIiMi0cftPRGT66q2pAB6dvJebm1ufqyQiogaA238iItNmkHMq9u7dq/FcCIGbN29i3bp16NWrlyFWSUREDQC3/0RETZNBmoqhQ4dqPJfJZGjTpg369u2LFStWGGKVRETUAHD7T0TUNBmkqVCr1YaYloiIGjhu/4mImqZ6PaeCiIiIiIhMj972VMTExNQ6duXKlfpaLRERGRm3/0REpLem4ocffqhVnEwm09cqiYioAeD2n4iI9NZUHDx4UF9TERFRI8LtPxER8ZwKIiIiIiLSiUGu/gQAp0+fxo4dO5CTk4Py8nKNZbt27TLUaomIyMi4/ScianoMsqdi+/btCAgIwMWLF7F7925UVFQgMzMT6enpsLW1NcQqiYioAeD2n4ioaTJIU/Hhhx9i1apV2LdvHywsLLBmzRpkZWVh+PDhaNeunSFWSUREDQC3/0RETZNBmoqff/4ZISEhAAALCwuUlJRAJpNhxowZ2LBhgyFWSUREDQC3/0RETZNBmgo7OzsUFRUBAP7whz/gwoULAICCggKUlpYaYpVERNQAcPtPRNQ06bWpqCoeffr0QWpqKgBg2LBhiI6OxqRJkzBy5Ej069dPn6skIqIGgNt/IqKmTa9NxQsvvAA/Pz94enpi2LBhAIC5c+ciJiYGt27dQmhoKD7//HN9rpKIiBoAfW//lyxZgpdeegk2NjZwcHDA0KFDcenSJY2YBw8eIDIyEq1bt4a1tTVCQ0Nx69YtjZicnByEhITAysoKDg4OmDVrFh4+fKgRc+jQIfTo0QNyuRydOnVCYmJitXzWr1+P9u3bw9LSEn5+fvj++++1zoWIyJTptak4fPgwunXrhiVLlsDd3R3h4eE4duwY3nvvPezduxcrVqyAnZ2dPldJREQNgL63/4cPH0ZkZCROnjyJ1NRUVFRUYMCAASgpKZFiZsyYgX379uHLL7/E4cOHkZubizfffFNaXllZiZCQEJSXl+P48eP44osvkJiYiHnz5kkx2dnZCAkJwSuvvIKzZ89i+vTpmDhxIg4cOCDFJCUlISYmBvHx8Thz5gy8vLwQHByM/Pz8WudCRGTqZEIIoe9JS0pKsGPHDiQmJuLo0aPo1KkTIiIiEB4eDicnJ32vrtFQqVSwtbVFYWEhlEqlsdOhpm6bzNgZkKGM0m6zrs9tk6G2/7dv34aDgwMOHz6MPn36oLCwEG3atMG2bdvw1ltvAQCysrLg7u6OEydO4OWXX8Z//vMfvP7668jNzYWjoyMAICEhAbNnz8bt27dhYWGB2bNnIzk5WTp8CwBGjBiBgoICpKSkAAD8/Pzw0ksvYd26dQAAtVoNFxcXvPPOO3jvvfdqlcuzsD5Qg8L6YNoMVCMMcqJ2ixYtMH78eBw+fBiXL1/GsGHDsH79erRr1w6DBw82xCqJiKgBMNT2v7CwEADQqlUrAEBGRgYqKirQv39/KaZr165o164dTpw4AQA4ceIEPD09pYYCAIKDg6FSqZCZmSnFPD5HVUzVHOXl5cjIyNCIMTMzQ//+/aWY2uRCRGTqDNJUPK5Tp054//33ERcXBxsbGyQnJxt6lURE1ADoa/uvVqsxffp09OrVC927dwcA5OXlwcLCAi1bttSIdXR0RF5enhTzeENRtbxq2e/FqFQq/Pbbb7hz5w4qKytrjHl8jmfl8qSysjKoVCqNBxFRY2bQpuLIkSMYN24cnJycMGvWLLz55ps4duyYIVdJREQNgD63/5GRkbhw4QK2b9+u5yyNZ8mSJbC1tZUeLi4uxk6JiEgnem8qcnNz8eGHH+L5559HUFAQrl69irVr1yI3NxeffvpprY4tJSKixscQ2/+oqCjs378fBw8eRNu2baVxJycnlJeXo6CgQCP+1q1b0rkbTk5O1a7AVPX8WTFKpRIKhQL29vYwNzevMebxOZ6Vy5PmzJmDwsJC6fHLL7/U4tMgImq49NpUDBo0CK6urvjHP/6BN954AxcvXsR3332H8ePHo0WLFvpcFRERNSD63v4LIRAVFYXdu3cjPT0dbm5uGst9fHzQvHlzpKWlSWOXLl1CTk4O/P39AQD+/v44f/68xlWaUlNToVQq4eHhIcU8PkdVTNUcFhYW8PHx0YhRq9VIS0uTYmqTy5PkcjmUSqXGg4ioMWumz8maN2+OnTt34vXXX4e5ubk+pyYiogZM39v/yMhIbNu2DV999RVsbGykcxNsbW2hUChga2uLiIgIxMTEoFWrVlAqlXjnnXfg7+8v7REZMGAAPDw88Pbbb2PZsmXIy8tDXFwcIiMjIZfLAQBTp07FunXrEBsbiwkTJiA9PR07duzQOP8jJiYG4eHh8PX1Rc+ePbF69WqUlJRg/PjxUk7PyoWIyNTptanYu3evPqcjIqJGQt/b/48//hgAEBQUpDG+adMmjBs3DgCwatUqmJmZITQ0FGVlZQgODsZHH30kxZqbm2P//v2YNm0a/P390aJFC4SHh2PhwoVSjJubG5KTkzFjxgysWbMGbdu2xWeffYbg4GApJiwsDLdv38a8efOQl5cHb29vpKSkaJy8/axciIhMnUHuU0E143XIqUHhdchNlxHvU0F1w58BNSisD6atMd2ngoiIiIiImg42FUREREREpBM2FUREREREpBM2FUREREREpBM2FUREREREpBM2FUREREREpBM2FUREREREpBM2FUREREREpBM2FUREREREpBM2FUREREREpBM2FUREREREpBM2FUREREREpBM2FUREREREpBM2FUREREREpBM2FURE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cohEpor1gfSNNaKRMvZJHdQ4PHjwQLz33nuiR48ewtbWVlhZWYkuXbqIuLg4UVpaKsXt3btXdOrUSTRr1kzjkoF//etfhb29vbC2thbh4eEiNja2VifiVT2srKyEu7u7+POf/yyuXLlSLT4lJUUEBAQIhUIhlEql6Nmzp9iwYYNGzE8//SRdyvDxE6fIOI4fPy4AiNdee00au3v3rhgyZIiwtrYWDg4OIi4uTowdO1YMGTJEigkMDBTR0dHV5sMTJ+HNmjVLtG7dWlhbW4uwsDCxatUqYWtrKy2vulzg41atWqXxe1tZWSkWL14sXF1dRfPmzUW7du00Tvq8efOmGDt2rLC3txdyuVx06NBBTJo0SRQWFtb1YyFqdFgfyBBYIxofmRD/d1YTERERERFRHfDqT0REREREpBM2FUREREREpBM2FUREREREpBM2FUREREREpBM2FUREREREpBM2FUREREREpBM2FUREREREpBM2FUREREREpBM2FUREREREpBM2FUREREREpBM2FUREREREpBM2FUREREREpBM2FUREREREpBM2FUREREREpBM2FUREREREpBM2FUREREREpBM2FUREREREpBM2FUSNSFBQEIKCgoydBhERNUCsEWRMbCqItCCTyWr1OHTokLFT1av27ds/9b127tzZ2OkRETUITbVGAMC3336LV155Bfb29mjZsiV69uyJLVu2GDstqkfNjJ0AUWPy5AZy8+bNSE1NrTbu7u5en2kZ3OrVq1FcXKwxdv36dcTFxWHAgAFGyoqIqGFpqjVi7969GDp0KPz9/TF//nzIZDLs2LEDY8eOxZ07dzBjxgxjp0j1QCaEEMZOgqixioqKwvr16/GsP6PS0lJYWVnpvL6q3dr6+JZLrVajvLwclpaWdXr94sWL8cEHH+DYsWMICAjQOR8iIlPTVGrEgAEDkJmZif/973+Qy+UAgIcPH6Jr165o0aIFzp07p3M+1PDx8CciPQsKCkL37t2RkZGBPn36wMrKCu+//z4A4KuvvkJISAicnZ0hl8vRsWNHLFq0CJWVldXm2bBhAzp27AiFQoGePXvi6NGjNa6vrKwM8fHx6NSpE+RyOVxcXBAbG4uysjKNOJlMhqioKGzduhXdunWDXC5HSkpKnd/ntm3b4ObmxoaCiEgLplgjVCoV7OzspIYCAJo1awZ7e3so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6JMLEVF9p/c3FTyrExERPY85akRhYSHS09Ol5YyMDFy4cAFNmzaFm5sbZsyYgcWLF8PT0xMeHh745JNP4OLiIp0hysvLCwMGDMDkyZORkJCAsrIyTJs2DSNHjoSLiwsAYPTo0ViwYAHCw8Mxe/ZsXLlyBWvWrMGqVauk/UZGRiIoKAgrVqzAoEGDsHPnTpw9e1Y67axMJntpLkRE9Z1Bx1QQERG9KmfPnsWbb74pLVccgzBu3DgkJiYiOjoaRUVFmDJlCh49eoQ33ngDKSkpsLGxkbbZvn07pk2bhr59+8LCwgIhISFYu3atNK5Wq/Hdd98hIiICvr6+cHBwQFxcnM61LAIDA7Fjxw7ExsZi7ty58PT0RHJyMjp27CjF6JMLEVF9ZtR1KsgwPA851So8D3n9VUuuU0H649+AahXWh/qtNl6ngoiIiIiIiE0FEREREREZhU0FEREREREZhU0FEREREREZhU0FEREREREZhU0FEREREREZhU0FEREREREZhU0FEREREREZhU0FEREREREZhU0FEREREREZhU0FEREREREZhU0FEREREREZhU0FEREREREZhU0FEREREREZhU0FEREREREZhU0FEREREREZhU0FEREREREZhU0FEREREREZhU0FEREREREZhU0FEREREREZhU0FEREREREZhU2FgdavX49WrVrBxsYG/v7++PHHH2s6JSIiqiVYI4iooWJTYYCkpCRERUUhPj4eP/30E7p06YLg4GDk5eXVdGpERFTDWCOIqCFjU2GAlStXYvLkyZgwYQK8vb2RkJAAW1tbbNq0qaZTIyKiGsYaQUQNWaOaTqCuKC0txblz5xATEyOts7CwQL9+/XD69OkqtykpKUFJSYm0nJ+fDwDQaDTmTZZIH8U1nQCZjYHvMRXvSUIIc2TTIBhaI1gfqFZjfajfzFQj2FTo6d69eygvL4eTk5POeicnJ6SlpVW5zZIlS7BgwYJK611dXc2SIxERAGCyulqbFRQUQK2u3rYNnaE1gvWBiGqMmWoEmwoziomJQVRUlLSs1Wrx4MEDNGvWDDKZrAYzq700Gg1cXV3x66+/QqVS1XQ6VA/wOfVyQggUFBTAxcWlplNpMFgfqoevZzI1PqdeTt8awaZCTw4ODrC0tERubq7O+tzcXDg7O1e5jVwuh1wu11nXpEkTc6VYr6hUKr64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/XUAQNeuXXHjxg20bdv2udsFBgbC1dUVSUlJ+PbbbzF8+PBKbxb06owYMQKRkZHYsWMHtm7diqlTp0Imk+HkyZMYMmQIxowZA+Dp3/vnn3+Gt7e3QfOfOnUK7u7umDdvnrTul19+MWgOT09PKBQKpKamYtKkSZXGu3btiqSkJDRv3hwqlcqguYkaAtYHqi7WiLqJTQXp5f79+xg+fDgmTpyIzp07w87ODmfPnsWyZcswZMgQKa5Vq1ZITU1Fz549IZfLYW9vj8jISIwfPx5+fn7o2bMntm/fjqtXr6J169Z67TcnJwfFxcW4cuUKVq9ejR9//BEHDhyApaUlACAuLg7vvvsu3Nzc8P7778PCwgIXL17ElStXsHjxYmmu0aNHIyEhAT///DOOHDli+geJ9KZUKhEaGoqYmBhoNBrpk0xPT0/s3r0bp06dgr29PVauXInc3FyDC4anpycyMzOxc+dOdOvWDQcOHMCePXsMmsPGxgazZ89GdHQ0rK2t0bNnT9y9exdXr15FeHg4wsLCsHz5cgwZMgQLFy5Ey5Yt8csvv+Drr79GdHR0pdMhEtVXrA9kaqwRdVRNH9RBdcPjx4/FnDlzRNeuXYVarRa2traiXbt2IjY2VhQXF0txe/fuFW3bthWNGjXSOWXgn//8Z+Hg4CCUSqUYN26ciI6O1utAvIqbra2t8PLyEh9++KG4efNmpfiUlBQRGBgoFAqFUKlUonv37mLjxo06MdeuXZNOZfjsgVNUM06dOiUAiHfeeUdad//+fTFkyBChVCpF8+bNRWxsrBg7dqwYMmSIFBMUFCQiIyMrzYffHYQ3a9Ys0axZM6FUKkVoaKhYtWqVUKvV0njF6QKftWrVKp3nbXl5uVi8eLFwd3cXVlZWws3NTeegz+zsbDF27Fjh4OAg5HK5aN26tZg8ebLIz8+v7sNCVOewPpA5sEbUPTIh/nNUExERERERUTXw7E9ERERERGQUNhVERERERGQUNhVERERERGQUNhVERERERGQUNhVERERERGQUNhVERERERGQUNhVERERERGQUNhVERERERGQUNhVERERERGQUNhVERERERGQUNhVERERERGQUNhVERERERGQUNhVERERERGQUNhVERERERGQUNhVERERERGQUNhVERERERGQUNhVERERERGQUNhVEdUifPn3Qp0+fmk6DiIhqEGsB1UZsKogMIJPJ9LodPXq0plM1uZ07d6Jr166wsbGBo6MjwsPDce/evZpOi4jolWuoteDGjRuYOXMmAgMDYWNjA5lMhtu3bz83fu/evVLdcHNzQ3x8PJ48efLqEqZXqlFNJ0BUl2zbtk1neevWrTh06FCl9V5eXq8yLbPbsGEDPvzwQ/Tt2xcrV67EnTt3sGbNGpw9exZnzpyBjY1NTadIRPTKNNRacPr0aaxduxbe3t7w8vLChQsXnhv77bffYujQoejTpw8+++wzXL58GYsXL0ZeXh42bNjw6pKmV0YmhBA1nQRRXTVt2jSsX78eL3sZFRcXw9bW1uj9VXzdbYpPv7RaLUpLS1/aEJSWlsLJyQmdO3fG0aNHIZPJAAD79+/H4MGDsXbtWkyfPt3ofIiI6qqGUAsA4MGDB7CysoKdnR3+53/+B7NmzUJGRgZatWpVKbZDhw6wsrLC2bNn0ajR08+wY2Nj8emnn+LatWto37690blT7cKfPxGZWJ8+fdCxY0ecO3cOvXv3hq2tLebOnQsA+OabbzBo0CC4uLhALpejTZs2WLRoEcrLyyvNs3HjRrRp0wYKhQLdu3fHiRMnqtxfSUkJ4uPj0bZtW8jlcri6uiI6OholJSU6cTKZDNOmTcP27dvRoUMHyOVypKSkvPT+XLlyBY8ePUJoaKjUUADAu+++C6VSiZ07dxry8BARNQj1rRYAQNOmTWFnZ/fSuGvXruHatWuYMmWK1FAAwIcffgghBHbv3q3X/qhu4c+fiMzg/v37GDhwIEaOHIkxY8bAyckJAJCYmAilUomoqCgolUocPnwYcXFx0Gg0WL58ubT93/72N/zpT39CYGAgZsyYgX//+99477330LRpU7i6ukpxWq0W7733Hv75z39iypQp8PLywuXLl7Fq1Sr8/PPPSE5O1snr8OHD2LVrF6ZNmwYHB4cqP136vYqCpFAoKo0pFAqcP38eWq0WFhb8jIKI6Fn1qRYY4vz58wAAPz8/nfUuLi5o2bKlNE71jCCiaouIiBC/fxkFBQUJACIhIaFSfHFxcaV1f/rTn4Stra14/PixEEKI0tJS0bx5c+Hj4yNKSkqkuI0bNwoAIigoSFq3bds2YWFhIU6cOKEzZ0JCggAgTp48Ka0DICwsLMTVq1cNuo93794VMplMhIeH66xPS0sTAAQAce/ePYPmJCKqTxpCLfi95cuXCwAiIyPjuWOZmZmVxrp16yZ69Ohh1L6pduJHi0RmIJfLMWHChErrn/20v6CgAPfu3UOvXr1QXFyMtLQ0AMDZs2eRl5eHDz74ANbW1lL8+PHjoVardeb76quv4OXlhfbt2+PevXvS7a233gIAHDlyRCc+KCgI3t7eBt0XBwcHjBgxAlu2bMGKFSvw73//GydOnEBoaCisrKwAAL/99ptBcxIRNQT1qRYYoqImyOXySmM2NjasGfUUf/5EZAZ/+MMfdIpAhatXryI2NhaHDx+GRqPRGcvPzwcA/PLLLwAAT09PnXErKyu0bt1aZ93Nmzdx/fp1ODo6VplHXl6ezrKHh4dhd+Q//vrXv+K3337Dxx9/jI8//hgAMGbMGLRp0wZff/01lEplteYlIqrP6lst0FdF0/T74zkA4PHjx1X+nJbqPjYVRGZQ1Rvmo0ePEBQUBJVKhYULF6JNmzawsbHBTz/9hNmzZ0Or1Rq8H61Wi06dOmHlypVVjj/7m9vn5aUPtVqNb775BpmZmbh9+zbc3d3h7u6OwMBAODo6okmTJtWal4ioPqtvtUBfLVq0AABkZ2dX2nd2dja6d+9u1v1TzWBTQfSKHD16FPfv38fXX3+N3r17S+szMjJ04tzd3QE8/eSp4qtrACgrK0NGRga6dOkirWvTpg0uXryIvn376pyZyVzc3Nzg5uYG4GlhPHfuHEJCQsy+XyKi+qI+1IKX8fHxAfD0J1zPNhBZWVm4c+cOpkyZUkOZkTnxmAqiV8TS0hIAdM5jXlpais8//1wnzs/PD46OjkhISEBpaam0PjExEY8ePdKJHTFiBP7v//4PX3zxRaX9/fbbbygqKjLhPdAVExODJ0+eYObMmWbbBxFRfVPfakFVOnTogPbt22Pjxo06p8ndsGEDZDIZ3n///VeaD70a/KaC6BUJDAyEvb09xo0bh//+7/+GTCbDtm3bKl0sycrKCosXL8af/vQnvPXWWwgNDUVGRgY2b95c6Xe0f/zjH7Fr1y588MEHOHLkCHr27Iny8nKkpaVh165dOHjwYKVT+lXHX/7yF1y5cgX+/v5o1KgRkpOT8d1332Hx4sXo1q2b0fMTETUUdbkW5Ofn47PPPgMAnDx5EgCwbt06NGnSBE2aNMG0adOk2OXLl+O9995D//79MXLkSFy5cgXr1q3DpEmT6t2Vxuk/avbkU0R12/NOI9ihQ4cq40+ePCl69OghFAqFcHFxEdHR0eLgwYMCgDhy5IhO7Oeffy48PDyEXC4Xfn5+4vjx4yIoKEjnNIJCPD3t4NKlS0WHDh2EXC4X9vb2wtfXVyxYsEDk5+dLcQBEREREte7n/v37Rffu3YWdnZ2wtbUVPXr0ELt27arWXERE9U1DqQUZGRnSqcR/f3N3d68Uv2fPHuHj4yPkcrlo2bKliI2NFaWlpdXaN9V+MiFeck15IiIiIiKiF+AxFUREREREZBQeU0HUgD148EDnAMDfs7S0fO55z4mIqH5gLSBT4M+fiBqwPn364NixY88dd3d3x+3bt19dQkRE9MqxFpApsKkgasDOnTuHhw8fPndcoVCgZ8+erzAjIiJ61VgLyBTYVBARERERkVF4oDYRERERERmFB2q/QlqtFllZWbCzs4NMJqvpdIiIADy9sm9BQQFcXFxgYcHPmmoC6wMR1Vb61gg2Fa9QVlYWXF1dazoNIqIq/frrr2jZsmVNp9EgsT4QUW33shrBpuIVsrOzA/D0j6JSqWo4GyKipzQaDVxdXaX3KHr1WB+IqLbSt0awqXiFKr7SVqlULBpEVOvwZzc1h/WBiGq7l9UI/niWiIiIiIiMwqaCiIiIiIiMwqaCiIiIiIiMwqaCiIiIiIiMwqaCiIiIiIiMwqaCiIiIiIiMwqaCiIiIiIiMwqaCiIiIiIiMwqaCiIiIiIiMwqaCiIiIiIiMwqaCiIiIiIiMwqaCiIiIiIiMwqaCiIiIiIiM0qimEyCiGrJDVtMZkLmMFjWdARHVZawP9ZuZagS/qSAiIiIiIqOwqSAiIiIiIqOwqSAiIiIiIqOwqSAiIiIiIqOwqSAiIiIiIqOwqSAiIiIiIqOwqSAiIiIiIqPUaFNx/PhxDB48GC4uLpDJZEhOTtYZF0IgLi4OLVq0gEKhQL9+/XDz5k2dmAcPHiAsLAwqlQpNmjRBeHg4CgsLdWIuXbqEXr16wcbGBq6urli2bFmlXL766iu0b98eNjY26NSpE/7xj38YnAsREZnG/PnzIZPJdG7t27eXxh8/foyIiAg0a9YMSqUSISEhyM3N1ZkjMzMTgwYNgq2tLZo3b45Zs2bhyZMnOjFHjx5F165dIZfL0bZtWyQmJlbKZf369WjVqhVsbGzg7++PH3/8UWdcn1yIiOq7Gm0qioqK0KVLF6xfv77K8WXLlmHt2rVISEjAmTNn0LhxYwQHB+Px48dSTFhYGK5evYpDhw5h//79OH78OKZMmSKNazQa9O/fH+7u7jh37hyWL1+O+fPnY+PGjVLMqVOnMGrUKISHh+P8+fMYOnQohg4diitXrhiUCxERmU6HDh2QnZ0t3f75z39KYzNnzsS+ffvw1Vdf4dixY8jKysKwYcOk8fLycgwaNAilpaU4deoUtmzZgsTERMTFxUkxGRkZGDRoEN58801cuHABM2bMwKRJk3Dw4EEpJikpCVFRUYiPj8dPP/2ELl26IDg4GHl5eXrnQkTUEMiEELXi0qsymQx79uzB0KFDATz9ZsDFxQUfffQRPv74YwBAfn4+nJyckJiYiJEjR+L69evw9vbGv/71L/j5+QEAUlJS8M477+DOnTtwcXHBhg0bMG/ePOTk5MDa2hoAMGfOHCQnJyMtLQ0AEBoaiqKiIuzfv1/Kp0ePHvDx8UFCQoJeuehDo9FArVYjPz8fKpXKJI8bUbXxiqn1l4FXS62N703z589HcnIyLly4UGksPz8fjo6O2LFjB95//30AQFpaGry8vHD69Gn06NED3377Ld59911kZWXByckJAJCQkIDZs2fj7t27sLa2xuzZs3HgwAGdD5BGjhyJR48eISUlBQDg7++Pbt26Yd26dQAArVYLV1dXTJ8+HXPmzNErF33Uxr8BNWCsD/WbmWpErT2mIiMjAzk5OejXr5+0Tq1Ww9/fH6dPnwYAnD59Gk2aNJEaCgDo168fLCwscObMGSmmd+/eUkMBAMHBwbhx4wYePnwoxTy7n4qYiv3ok0tVSkpKoNFodG5ERKSfmzdvwsXFBa1bt0ZYWBgyMzMBAOfOnUNZWZnOe3L79u3h5uamUx86deokNRTA0/d1jUaDq1evSjEveu8vLS3FuXPndGIsLCzQr18/KUafXIiIGoJa21Tk5OQAgE5BqFiuGMvJyUHz5s11xhs1aoSmTZvqxFQ1x7P7eF7Ms+Mvy6UqS5YsgVqtlm6urq4vuddERAQ8/YYgMTERKSkp2LBhAzIyMtCrVy8UFBRI3zw3adJEZ5vfv29X971fo9Hgt99+w71791BeXv7S+vCyXKrCD52IqL5pVNMJ1GcxMTGIioqSljUaDRsLIiI9DBw4UPp3586d4e/vD3d3d+zatQsKhaIGMzONJUuWYMGCBTWdBhGRydTabyqcnZ0BoNIZNHJzc6UxZ2dnnYPlAODJkyd48OCBTkxVczy7j+fFPDv+slyqIpfLoVKpdG5ERGS4Jk2a4LXXXkN6ejqcnZ1RWlqKR48e6cT8/n27uu/9KpUKCoUCDg4OsLS0fGl9eFkuVYmJiUF+fr50+/XXX/V7IIiIaqlqNRVPnjzB999/j7/+9a8oKCgAAGRlZVU6lasxPDw84OzsjNTUVGmdRqPBmTNnEBAQAAAICAjAo0ePcO7cOSnm8OHD0Gq18Pf3l2KOHz+OsrIyKebQoUNo164d7O3tpZhn91MRU7EffXIhIqKnzFEjCgsLcevWLbRo0QK+vr6wsrLSeU++ceMGMjMzderD5cuXdT54OnToEFQqFby9vaWYF733W1tbw9fXVydGq9UiNTVVitEnl6rwQyciqm8M/vnTL7/8ggEDBiAzMxMlJSV4++23YWdnh6VLl6KkpAQJCQl6z1VYWIj09HRpOSMjAxcuXEDTpk3h5uaGGTNmYPHixfD09ISHhwc++eQTuLi4SGeI8vLywoABAzB58mQkJCSgrKwM06ZNw8iRI+Hi4gIAGD16NBYsWIDw8HDMnj0bV65cwZo1a7Bq1Sppv5GRkQgKCsKKFSswaNAg7Ny5E2fPnpVOOyuTyV6aCxERma5GfPzxxxg8eDDc3d2RlZWF+Ph4WFpaYtSoUVCr1QgPD0dUVBSaNm0KlUqF6dOnIyAgQDrbUv/+/eHt7Y0//vGPWLZsGXJychAbG4uIiAjI5XIAwAcffIB169YhOjoaEydOxOHDh7Fr1y4cOHBAyiMqKgrjxo2Dn58funfvjtWrV6OoqAgTJkwAAL1yISJqCAxuKiIjI+Hn54eLFy+iWbNm0vr/+q//wuTJkw2a6+zZs3jzzTel5YrjD8aNG4fExERER0ejqKgIU6ZMwaNHj/DGG28gJSUFNjY20jbbt2/HtGnT0LdvX1hYWCAkJARr166VxtVqNb777jtERETA19cXDg4OiIuL07mWRWBgIHbs2IHY2FjMnTsXnp6eSE5ORseOHaUYfXIhImroTFUj7ty5g1GjRuH+/ftwdHTEG2+8gR9++AGOjo4AgFWrVknv+SUlJQgODsbnn38ubW9paYn9+/dj6tSpCAgIQOPGjTFu3DgsXLhQivHw8MCBAwcwc+ZMrFmzBi1btsSXX36J4OBgKSY0NBR3795FXFwccnJy4OPjg5SUFJ2Dt1+WCxFRQ2DwdSqaNWuGU6dOoV27drCzs8PFixfRunVr3L59G97e3iguLjZXrnUez0NOtQrPQ15/1eB1Klgjqof1gWoV1of6rbZcp0Kr1aK8vLzS+jt37sDOzs7Q6YiIqB5hjSAiapgMbir69++P1atXS8symQyFhYWIj4/HO++8Y8rciIiojmGNICJqmAw+pmLFihUIDg6Gt7c3Hj9+jNGjR+PmzZtwcHDA3//+d3PkSEREdQRrBBFRw2RwU9GyZUtcvHgRO3fuxKVLl1BYWIjw8HCEhYXViwsSERFR9bFGEBE1TNW6onajRo0wZswYU+dCRET1AGsEEVHDY3BTsXXr1heOjx07ttrJEBFR3cYaQUTUMFXrOhXPKisrQ3FxMaytrWFra8uCQUTUgLFGEBE1TAaf/enhw4c6t8LCQty4cQNvvPEGD8IjImrgWCOIiBomg5uKqnh6euIvf/lLpU+oiIiIWCOIiOo/kzQVwNMD87Kyskw1HRER1SOsEURE9ZvBx1Ts3btXZ1kIgezsbKxbtw49e/Y0WWJERFT3sEYQETVMBjcVQ4cO1VmWyWRwdHTEW2+9hRUrVpgqLyIiqoNYI4iIGiaDmwqtVmuOPIiIqB5gjSAiaphMdkwFERERERE1THp9UxEVFaX3hCtXrqx2MkREVPewRhARkV5Nxfnz5/WaTCaTGZUMERHVPawRRESkV1Nx5MgRc+dBRER1FGsEERHxmAoiIiIiIjKKwWd/AoCzZ89i165dyMzMRGlpqc7Y119/bZLEiIiobmKNICJqeAz+pmLnzp0IDAzE9evXsWfPHpSVleHq1as4fPgw1Gq1OXIkIqI6gjWCiKhhMrip+PTTT7Fq1Srs27cP1tbWWLNmDdLS0jBixAi4ubmZI0ciIqojWCOIiBomg5uKW7duYdCgQQAAa2trFBUVQSaTYebMmdi4caPJEyQiorqDNYKIqGEyuKmwt7dHQUEBAOAPf/gDrly5AgB49OgRiouLTZsdERHVKawRREQNk95NRUVh6N27Nw4dOgQAGD58OCIjIzF58mSMGjUKffv2NWly8+fPh0wm07m1b99eGn/8+DEiIiLQrFkzKJVKhISEIDc3V2eOzMxMDBo0CLa2tmjevDlmzZqFJ0+e6MQcPXoUXbt2hVwuR9u2bZGYmFgpl/Xr16NVq1awsbGBv78/fvzxR5PeVyKiuszUNWLJkiXo1q0b7Ozs0Lx5cwwdOhQ3btzQienTp0+lGvHBBx/oxLyqGqBPPSIiqs/0bio6d+4Mf39/dOrUCcOHDwcAzJs3D1FRUcjNzUVISAj+9re/mTzBDh06IDs7W7r985//lMZmzpyJffv24auvvsKxY8eQlZWFYcOGSePl5eUYNGgQSktLcerUKWzZsgWJiYmIi4uTYjIyMjBo0CC8+eabuHDhAmbMmIFJkybh4MGDUkxSUhKioqIQHx+Pn376CV26dEFwcDDy8vJMfn+JiOoiU9eIY8eOISIiAj/88AMOHTqEsrIy9O/fH0VFRTpxkydP1qkRy5Ytk8ZeZQ14WT0iIqrvZEIIoU/giRMnsHnzZuzevRtarRYhISGYNGkSevXqZbbk5s+fj+TkZFy4cKHSWH5+PhwdHbFjxw68//77AIC0tDR4eXnh9OnT6NGjB7799lu8++67yMrKgpOTEwAgISEBs2fPxt27d2FtbY3Zs2fjwIED0qdsADBy5Eg8evQIKSkpAAB/f39069YN69atAwBotVq4urpi+vTpmDNnjt73R6PRQK1WIz8/HyqVqroPC5Fp7ODVjeut0Xq9rUtM8d5k7hpx9+5dNG/eHMeOHUPv3r0BPP2mwsfHB6tXr65ym1dVA/SpRy/D+kC1CutD/WamGqH3NxW9evXCpk2bkJ2djc8++wy3b99GUFAQXnvtNSxduhQ5OTkGJaivmzdvwsXFBa1bt0ZYWBgyMzMBAOfOnUNZWRn69esnxbZv3x5ubm44ffo0AOD06dPo1KmTVEwAIDg4GBqNBlevXpVinp2jIqZijtLSUpw7d04nxsLCAv369ZNinqekpAQajUbnRkRUH5m7RuTn5wMAmjZtqrN++/btcHBwQMeOHRETE6Nz3MarqgH61CMiovrO4AO1GzdujAkTJuDYsWP4+eefMXz4cKxfvx5ubm547733TJqcv78/EhMTkZKSgg0bNiAjIwO9evVCQUEBcnJyYG1tjSZNmuhs4+TkJBWvnJwcnWJSMV4x9qIYjUaD3377Dffu3UN5eXmVMS8rkkuWLIFarZZurq6uBj8GRER1iTlqhFarxYwZM9CzZ0907NhRWj969Gj87//+L44cOYKYmBhs27YNY8aMkcZfVQ3Qpx79Hj90IqL6plpX1K7Qtm1bzJ07F+7u7oiJicGBAwdMlRcAYODAgdK/K36v6+7ujl27dkGhUJh0X+YQExODqKgoaVmj0bCxIKIGw1Q1IiIiAleuXNE5pg4ApkyZIv27U6dOaNGiBfr27Ytbt26hTZs2RuVubkuWLMGCBQtqOg0iIpMx+JuKCsePH8f48ePh7OyMWbNmYdiwYTh58qQpc6ukSZMmeO2115Ceng5nZ2eUlpbi0aNHOjG5ublwdnYGADg7O1c6+0bF8stiVCoVFAoFHBwcYGlpWWVMxRzPI5fLoVKpdG5ERA2BqWrEtGnTsH//fhw5cgQtW7Z8Yay/vz8AID09HcCrqwH61KPfi4mJQX5+vnT79ddfX3jfiIhqO4OaiqysLHz66ad47bXX0KdPH6Snp2Pt2rXIysrCF198odfBaMYoLCzErVu30KJFC/j6+sLKygqpqanS+I0bN5CZmYmAgAAAQEBAAC5fvqxzho5Dhw5BpVLB29tbinl2joqYijmsra3h6+urE6PVapGamirFEBGRaWuEEALTpk3Dnj17cPjwYXh4eLx0m4qTerRo0QLAq6sB+tSj3+OHTkRU3+j986eBAwfi+++/h4ODA8aOHYuJEyeiXbt25swNH3/8MQYPHgx3d3dkZWUhPj4elpaWGDVqFNRqNcLDwxEVFYWmTZtCpVJh+vTpCAgIkApX//794e3tjT/+8Y9YtmwZcnJyEBsbi4iICMjlcgDABx98gHXr1iE6OhoTJ07E4cOHsWvXLp2v6aOiojBu3Dj4+fmhe/fuWL16NYqKijBhwgSz3n8iorrC1DUiIiICO3bswDfffAM7Ozvp2AS1Wg2FQoFbt25hx44deOedd9CsWTNcunQJM2fORO/evdG5c2cAr64G6FOPiIjqO72bCisrK+zevRvvvvsuLC0tzZmT5M6dOxg1ahTu378PR0dHvPHGG/jhhx/g6OgIAFi1ahUsLCwQEhKCkpISBAcH4/PPP5e2t7S0xP79+zF16lQEBASgcePGGDduHBYuXCjFeHh44MCBA5g5cybWrFmDli1b4ssvv0RwcLAUExoairt37yIuLg45OTnw8fFBSkpKpQP3iIgaKlPXiA0bNgB4etrYZ23evBnjx4+HtbU1vv/+e+k/+K6urggJCUFsbKwU+yprwMvqERFRfaf3dSrIeDwPOdUqPA95/VUD16kg4/BvQLUK60P9VtPXqSAiIiIiIqoKmwoiIiIiIjIKmwoiIiIiIjIKmwoiIiIiIjIKmwoiIiIiIjIKmwoiIiIiIjIKmwoiIiIiIjIKmwoiIiIiIjIKmwoiIiIiIjIKmwoiIiIiIjIKmwoiIiIiIjIKmwoiIiIiIjIKmwoiIiIiIjIKmwoiIiIiIjIKmwoiIiIiIjIKmwoiIiIiIjIKmwoiIiIiIjIKmwoiIiIiIjIKmwoiIiIiIjIKmwoiIiIiIjIKmwoiIiIiIjIKmwoiIiIiIjIKmwoiIiIiIjIKmwoDrV+/Hq1atYKNjQ38/f3x448/1nRKRERUS7BGEFFDxabCAElJSYiKikJ8fDx++ukndOnSBcHBwcjLy6vp1IiIqIaxRhBRQ8amwgArV67E5MmTMWHCBHh7eyMhIQG2trbYtGlTTadGREQ1jDWCiBqyRjWdQF1RWlqKc+fOISYmRlpnYWGBfv364fTp01VuU1JSgpKSEmk5Pz8fAKDRaMybLJE+ims6ATIbA99jKt6ThBDmyKZBMLRGsD5Qrcb6UL+ZqUawqdDTvXv3UF5eDicnJ531Tk5OSEtLq3KbJUuWYMGCBZXWu7q6miVHIiIAwGR1tTYrKCiAWl29bRs6Q2sE6wMR1Rgz1Qg2FWYUExODqKgoaVmr1eLBgwdo1qwZZDJZDWZWe2k0Gri6uuLXX3+FSqWq6XSoHuBz6uWEECgoKICLi0tNp9JgsD5UD1/PZGp8Tr2cvjWCTYWeHBwcYGlpidzcXJ31ubm5cHZ2rnIbuVwOuVyus65JkybmSrFeUalUfHGTSfE59WL8hsI4htYI1gfj8PVMpsbn1IvpUyN4oLaerK2t4evri9TUVGmdVqtFamoqAgICajAzIiKqaawRRNTQ8ZsKA0RFRWHcuHHw8/ND9+7dsXr1ahQVFWHChAk1nRoREdUw1ggiasjYVBggNDQUd+/eRVxcHHJycuDj44OUlJRKB+ZR9cnlcsTHx1f6WQBRdfE5Ra8Ka4T58fVMpsbnlOnIBM8hSERERERERuAxFUREREREZBQ2FUREREREZBQ2FUREREREZBQ2FVQj5s+fDx8fn5pOg+oRmUyG5OTkmk6DiIzE+kDmwBphfmwqSG93797F1KlT4ebmBrlcDmdnZwQHB+PkyZNSjKletLdv34ZMJpNudnZ26NChAyIiInDz5k2j56eaMXjwYAwYMKDKsRMnTkAmk+HSpUvVmjs7OxsDBw40Jj0iqibWBzIF1oi6jaeUJb2FhISgtLQUW7ZsQevWrZGbm4vU1FTcv3/fbPv8/vvv0aFDBxQXF+Py5ctYs2YNunTpgn379qFv375m2y+ZR3h4OEJCQnDnzh20bNlSZ2zz5s3w8/ND586dDZqztLQU1tbWz72yPRGZH+sDmQJrRB0niPTw8OFDAUAcPXr0uTHu7u4CgHRzd3eXxpYsWSKaN28ulEqlmDhxopg9e7bo0qXLc+fKyMgQAMT58+d11peXl4s+ffoId3d38eTJE2l9cnKyeP3114VcLhceHh5i/vz5oqysTAghxKhRo8SIESN05iktLRXNmjUTW7Zs0f9BIKOVlZUJJycnsWjRIp31BQUFQqlUisWLF4uRI0cKFxcXoVAoRMeOHcWOHTt0YoOCgkRERISIjIwUzZo1E3369BFCCAFA7NmzR4qLjo4Wnp6eQqFQCA8PDxEbGytKS0ul8fj4eNGlSxexdetW4e7uLlQqlQgNDRUajUaKKS8vF0uXLhVt2rQR1tbWwtXVVSxevFgaz8zMFMOHDxdqtVrY29uL9957T2RkZJjwESOq/VgfyFRYI+o2NhWkl7KyMqFUKsWMGTPE48ePq4zJy8sTAMTmzZtFdna2yMvLE0IIkZSUJORyufjyyy9FWlqamDdvnrCzs6tW0RBCiD179ggA4syZM0IIIY4fPy5UKpVITEwUt27dEt99951o1aqVmD9/vhBCiP379wuFQiEKCgqkOfbt2ycUCoXOmwO9GrNmzRJt2rQRWq1WWrdp0yahUCjE7du3xfLly8X58+fFrVu3xNq1a4WlpaX0txbiacFQKpVi1qxZIi0tTaSlpQkhKheMRYsWiZMnT4qMjAyxd+9e4eTkJJYuXSqNx8fHC6VSKYYNGyYuX74sjh8/LpydncXcuXOlmOjoaGFvby8SExNFenq6OHHihPjiiy+EEE//4+Hl5SUmTpwoLl26JK5duyZGjx4t2rVrJ0pKSsz18BHVOqwPZEqsEXUXmwrS2+7du4W9vb2wsbERgYGBIiYmRly8eFEn5vcvWiGECAgIEB9++KHOOn9//2oXjevXrwsAIikpSQghRN++fcWnn36qE7Nt2zbRokULIcTTgufg4CC2bt0qjY8aNUqEhoa+7C6TGVT8/Y4cOSKt69WrlxgzZkyV8YMGDRIfffSRtBwUFCRef/31SnFVPfeetXz5cuHr6ystx8fHC1tbW53/OMyaNUv4+/sLIYTQaDRCLpdLBeL3tm3bJtq1a6dT+EpKSoRCoRAHDx58bh5E9RHrA5kKa0TdxQO1SW8hISHIysrC3r17MWDAABw9ehRdu3ZFYmLiC7e7fv06/P39ddYFBARUOw/xn4vAy2QyAMDFixexcOFCKJVK6TZ58mRkZ2ejuLgYjRo1wogRI7B9+3YAQFFREb755huEhYVVOweqvvbt2yMwMBCbNm0CAKSnp+PEiRMIDw9HeXk5Fi1ahE6dOqFp06ZQKpU4ePAgMjMzdebw9fV96X6SkpLQs2dPODs7Q6lUIjY2ttI8rVq1gp2dnbTcokUL5OXlAXj6vC0pKXnub7MvXryI9PR02NnZSc+7pk2b4vHjx7h165ZBjwlRXcf6QKbCGlF38UBtMoiNjQ3efvttvP322/jkk08wadIkxMfHY/z48a8sh+vXrwMAPDw8AACFhYVYsGABhg0bVmW+ABAWFoagoCDk5eXh0KFDUCgUzz3DBJlfeHg4pk+fjvXr12Pz5s1o06YNgoKCsHTpUqxZswarV69Gp06d0LhxY8yYMQOlpaU62zdu3PiF858+fRphYWFYsGABgoODoVarsXPnTqxYsUInzsrKSmdZJpNBq9UCABQKxQv3UVhYCF9fX+k/I89ydHR84bZE9RHrA5kKa0TdxKaCjOLt7a1zikArKyuUl5frxHh5eeHMmTMYO3astO6HH36o1v60Wi3Wrl0LDw8PvP766wCArl274saNG2jbtu1ztwsMDISrqyuSkpLw7bffYvjw4ZXeLOjVGTFiBCIjI7Fjxw5s3boVU6dOhUwmw8mTJzFkyBCMGTMGwNO/988//wxvb2+D5j916hTc3d0xb948ad0vv/xi0Byenp5QKBRITU3FpEmTKo137doVSUlJaN68OVQqlUFzEzUErA9UXawRdRObCtLL/fv3MXz4cEycOBGdO3eGnZ0dzp49i2XLlmHIkCFSXKtWrZCamoqePXtCLpfD3t4ekZGRGD9+PPz8/NCzZ09s374dV69eRevWrfXab05ODoqLi3HlyhWsXr0aP/74Iw4cOABLS0sAQFxcHN599124ubnh/fffh4WFBS5evIgrV65g8eLF0lyjR49GQkICfv75Zxw5csT0DxLpTalUIjQ0FDExMdBoNNInmZ6enti9ezdOnToFe3t7rFy5Erm5uQYXDE9PT2RmZmLnzp3o1q0bDhw4gD179hg0h42NDWbPno3o6GhYW1ujZ8+euHv3Lq5evYrw8HCEhYVh+fLlGDJkCBYuXIiWLVvil19+wddff43o6OhKp0Mkqq9YH8jUWCPqqJo+qIPqhsePH4s5c+aIrl27CrVaLWxtbUW7du1EbGysKC4uluL27t0r2rZtKxo1aqRzysA///nPwsHBQSiVSjFu3DgRHR2t14F4FTdbW1vh5eUlPvzwQ3Hz5s1K8SkpKSIwMFAoFAqhUqlE9+7dxcaNG3Virl27Jp3K8NkDp6hmnDp1SgAQ77zzjrTu/v37YsiQIUKpVIrmzZuL2NhYMXbsWDFkyBApJigoSERGRlaaD787CG/WrFmiWbNmQqlUitDQULFq1SqhVqul8YrTBT5r1apVOs/b8vJysXjxYuHu7i6srKyEm5ubzkGf2dnZYuzYscLBwUHI5XLRunVrMXnyZJGfn1/dh4WozmF9IHNgjah7ZEL856gmIiIiIiKiauDZn4iIiIiIyChsKoiIiIiIyChsKoiIiIiIyChsKoiIiIiIyChsKoiIiIiIyChsKoiIiIiIyChsKoiIiIiIyChsKoiIiIiIyChsKoiIiIiIyChsKoiIiIiIyChsKoiIiIiIyChsKoiIiIiIyCj/D0XYbKCBy5J8AAAAAElFTkSuQmCC\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# ipython-input-66-4e077fd70770\n",
        "\n",
        "# Generate and plot the equity chart, populating combined_equity\n",
        "model, scaler = train_ml_model(traders)\n",
        "combined_equity = generate_equity_curve_with_ml(trader_performance, traders, model, scaler)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 193
        },
        "id": "5btL0QydTCaE",
        "outputId": "686edc59-4260-4619-f86f-e2eedb79eb42"
      },
      "execution_count": 5,
      "outputs": [
        {
          "output_type": "error",
          "ename": "NameError",
          "evalue": "name 'train_ml_model' is not defined",
          "traceback": [
            "\u001b[0;31m---------------------------------------------------------------------------\u001b[0m",
            "\u001b[0;31mNameError\u001b[0m                                 Traceback (most recent call last)",
            "\u001b[0;32m<ipython-input-5-d3aceb0a753c>\u001b[0m in \u001b[0;36m<cell line: 0>\u001b[0;34m()\u001b[0m\n\u001b[1;32m      2\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      3\u001b[0m \u001b[0;31m# Generate and plot the equity chart, populating combined_equity\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m----> 4\u001b[0;31m \u001b[0mmodel\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mscaler\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mtrain_ml_model\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mtraders\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m      5\u001b[0m \u001b[0mcombined_equity\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mgenerate_equity_curve_with_ml\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mtrader_performance\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mtraders\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mmodel\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mscaler\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;31mNameError\u001b[0m: name 'train_ml_model' is not defined"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "import numpy as np\n",
        "import random\n",
        "import matplotlib.pyplot as plt\n",
        "\n",
        "# Function to generate realistic random trader metrics for a professional day trader\n",
        "def generate_random_trader_data():\n",
        "    trader_name = f\"Trader {random.randint(1, 1000)}\"  # Random name\n",
        "    trades = random.randint(200, 1000)  # Random number of trades per year\n",
        "    won_trades = random.randint(trades // 2, trades)  # Random won trades\n",
        "    lost_trades = trades - won_trades  # Lost trades\n",
        "    win_rate = won_trades / trades  # Win rate\n",
        "    avg_win = round(np.random.normal(loc=50, scale=20), 2)  # Average win (with some variability)\n",
        "    avg_loss = round(np.random.normal(loc=-40, scale=15), 2)  # Average loss (with some variability)\n",
        "\n",
        "    # Introduce a more human-like expectancy distribution\n",
        "    # Most traders will have a positive expectancy (between 0.02 and 0.05)\n",
        "    expectancy = round(np.random.normal(loc=0.03, scale=0.02), 4)\n",
        "    # Some traders might have a negative expectancy (human inefficiency)\n",
        "    if random.random() < 0.2:  # 20% chance to have negative expectancy\n",
        "        expectancy = round(np.random.uniform(-0.01, -0.03), 4)\n",
        "\n",
        "    std_dev = round(np.random.uniform(0.01, 0.2), 2)  # Standard deviation to simulate inefficiency\n",
        "    variance = round(np.random.uniform(0.01, 0.1), 2)  # Variance to represent random market conditions\n",
        "\n",
        "    return {\n",
        "        \"name\": trader_name,\n",
        "        \"trades\": trades,\n",
        "        \"wonTrades\": won_trades,\n",
        "        \"lostTrades\": lost_trades,\n",
        "        \"wonTradesPercent\": round((won_trades / trades) * 100, 2),\n",
        "        \"lostTradesPercent\": round((lost_trades / trades) * 100, 2),\n",
        "        \"averageWin\": avg_win,\n",
        "        \"averageLoss\": avg_loss,\n",
        "        \"expectancy\": expectancy,  # Correct key to ensure it's included\n",
        "        \"standardDeviation\": std_dev,\n",
        "        \"variance\": variance,\n",
        "        \"performance_history\": []  # To track performance over time\n",
        "    }\n",
        "\n",
        "# Generate a list of traders with random metrics\n",
        "def generate_traders(num_traders=20):\n",
        "    traders = [generate_random_trader_data() for _ in range(num_traders)]\n",
        "    return traders\n",
        "\n",
        "# Simulate trader performance over 5 years (60 months)\n",
        "def simulate_trader_performance(trader_data, months=60):\n",
        "    expectancy = trader_data[\"expectancy\"] / 100  # Convert expectancy to decimal\n",
        "\n",
        "    # Simulate monthly performance with slight randomness and human inefficiency\n",
        "    monthly_returns = []\n",
        "    for _ in range(months):\n",
        "        # Apply human inefficiency and random mistakes (e.g., missed opportunities, bad risk management)\n",
        "        monthly_return = np.random.normal(loc=expectancy, scale=0.05)  # 5% volatility\n",
        "        monthly_returns.append(monthly_return)\n",
        "\n",
        "    trader_data[\"performance_history\"] = monthly_returns  # Save history for later weighting\n",
        "\n",
        "    return np.cumsum(monthly_returns)  # Cumulative sum for equity curve\n",
        "\n",
        "# Adjust the weighting of traders dynamically based on performance\n",
        "def adjust_weights(traders, month):\n",
        "    total_performance = 0\n",
        "    weighted_performance = []\n",
        "\n",
        "    # Calculate the total performance of all traders and determine their weight based on performance\n",
        "    for trader in traders:\n",
        "        # Calculate the rolling average (recent performance) of the trader up to the current month\n",
        "        recent_performance = np.mean(trader[\"performance_history\"][:month])\n",
        "\n",
        "        # Weight based on profitability: positive expectancy gets more weight, negative gets less\n",
        "        if recent_performance > 0:\n",
        "            weight = 1 + recent_performance  # Increase weight for profitable traders\n",
        "        else:\n",
        "            weight = 1 / (1 + abs(recent_performance))  # Decrease weight for unprofitable traders\n",
        "\n",
        "        weighted_performance.append(weight)\n",
        "        total_performance += weight\n",
        "\n",
        "    # Normalize weights to sum to 1\n",
        "    normalized_weights = [weight / total_performance for weight in weighted_performance]\n",
        "\n",
        "    return normalized_weights\n",
        "\n",
        "# Process all traders and simulate their performance over the year\n",
        "def process_traders(trader_list, months=60):\n",
        "    trader_performance = {}\n",
        "\n",
        "    # Simulate each trader's performance over the months\n",
        "    for trader in trader_list:\n",
        "        trader_performance[trader[\"name\"]] = simulate_trader_performance(trader, months)\n",
        "\n",
        "    return trader_performance\n",
        "\n",
        "# Generate the overall equity curve chart with adjusted weights\n",
        "def generate_equity_chart(trader_performance, traders, months=60):\n",
        "    # Initialize the equity curve with all traders combined\n",
        "    combined_equity = np.zeros(months)\n",
        "\n",
        "    for month in range(1, months + 1):\n",
        "        # Adjust the weights dynamically for each month\n",
        "        weights = adjust_weights(traders, month)\n",
        "\n",
        "        # Add each trader's performance to the overall equity curve, weighted by their performance\n",
        "        for i, (name, performance) in enumerate(trader_performance.items()):\n",
        "            combined_equity[month-1] += performance[month-1] * weights[i]\n",
        "\n",
        "    # Normalize to start from 100,000\n",
        "    initial_equity = 100000\n",
        "    combined_equity = initial_equity * (1 + combined_equity)  # Apply compounding to simulate growth\n",
        "\n",
        "    # Plot the equity curve\n",
        "    plt.figure(figsize=(12, 6))\n",
        "    plt.plot(combined_equity, label=\"Combined Equity Curve\", color=\"green\")\n",
        "    plt.xlabel(\"Months\")\n",
        "    plt.ylabel(\"Equity (£)\")\n",
        "    plt.title(\"Overall Equity Curve for Combined Traders (5 Year Simulation)\")\n",
        "    plt.legend()\n",
        "    plt.grid(True)\n",
        "    plt.tight_layout()\n",
        "    plt.show()\n",
        "\n",
        "# Main Execution\n",
        "if __name__ == \"__main__\":\n",
        "    # Generate 20 random traders with mixed profitability\n",
        "    traders = generate_traders(20)\n",
        "\n",
        "    # Process traders from generated data\n",
        "    trader_performance = process_traders(traders)\n",
        "\n",
        "    # Generate the equity chart\n",
        "    generate_equity_chart(trader_performance, traders)\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 607
        },
        "id": "NC0CtQyQINKc",
        "outputId": "5b4dba9c-79b9-4217-b383-33814d741b17"
      },
      "execution_count": 6,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 1200x600 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# ipython-input-66-4e077fd70770\n",
        "\n",
        "# Generate and plot the equity chart, populating combined_equity\n",
        "model, scaler = train_ml_model(traders)\n",
        "combined_equity = generate_equity_curve_with_ml(trader_performance, traders, model, scaler)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 193
        },
        "id": "OohvTsVfS-G_",
        "outputId": "944f945f-df08-4a9b-b3ec-ff34813c8eb6"
      },
      "execution_count": 7,
      "outputs": [
        {
          "output_type": "error",
          "ename": "NameError",
          "evalue": "name 'train_ml_model' is not defined",
          "traceback": [
            "\u001b[0;31m---------------------------------------------------------------------------\u001b[0m",
            "\u001b[0;31mNameError\u001b[0m                                 Traceback (most recent call last)",
            "\u001b[0;32m<ipython-input-7-d3aceb0a753c>\u001b[0m in \u001b[0;36m<cell line: 0>\u001b[0;34m()\u001b[0m\n\u001b[1;32m      2\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      3\u001b[0m \u001b[0;31m# Generate and plot the equity chart, populating combined_equity\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m----> 4\u001b[0;31m \u001b[0mmodel\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mscaler\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mtrain_ml_model\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mtraders\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m      5\u001b[0m \u001b[0mcombined_equity\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mgenerate_equity_curve_with_ml\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mtrader_performance\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mtraders\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mmodel\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mscaler\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;31mNameError\u001b[0m: name 'train_ml_model' is not defined"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "!pip install mplfinance"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "798ymHR_Jz_h",
        "outputId": "1d8a2e77-caf6-40cd-c0a8-c0c6aeb508fc"
      },
      "execution_count": 8,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Collecting mplfinance\n",
            "  Downloading mplfinance-0.12.10b0-py3-none-any.whl.metadata (19 kB)\n",
            "Requirement already satisfied: matplotlib in /usr/local/lib/python3.11/dist-packages (from mplfinance) (3.10.0)\n",
            "Requirement already satisfied: pandas in /usr/local/lib/python3.11/dist-packages (from mplfinance) (2.2.2)\n",
            "Requirement already satisfied: contourpy>=1.0.1 in /usr/local/lib/python3.11/dist-packages (from matplotlib->mplfinance) (1.3.1)\n",
            "Requirement already satisfied: cycler>=0.10 in /usr/local/lib/python3.11/dist-packages (from matplotlib->mplfinance) (0.12.1)\n",
            "Requirement already satisfied: fonttools>=4.22.0 in /usr/local/lib/python3.11/dist-packages (from matplotlib->mplfinance) (4.56.0)\n",
            "Requirement already satisfied: kiwisolver>=1.3.1 in /usr/local/lib/python3.11/dist-packages (from matplotlib->mplfinance) (1.4.8)\n",
            "Requirement already satisfied: numpy>=1.23 in /usr/local/lib/python3.11/dist-packages (from matplotlib->mplfinance) (1.26.4)\n",
            "Requirement already satisfied: packaging>=20.0 in /usr/local/lib/python3.11/dist-packages (from matplotlib->mplfinance) (24.2)\n",
            "Requirement already satisfied: pillow>=8 in /usr/local/lib/python3.11/dist-packages (from matplotlib->mplfinance) (11.1.0)\n",
            "Requirement already satisfied: pyparsing>=2.3.1 in /usr/local/lib/python3.11/dist-packages (from matplotlib->mplfinance) (3.2.1)\n",
            "Requirement already satisfied: python-dateutil>=2.7 in /usr/local/lib/python3.11/dist-packages (from matplotlib->mplfinance) (2.8.2)\n",
            "Requirement already satisfied: pytz>=2020.1 in /usr/local/lib/python3.11/dist-packages (from pandas->mplfinance) (2025.1)\n",
            "Requirement already satisfied: tzdata>=2022.7 in /usr/local/lib/python3.11/dist-packages (from pandas->mplfinance) (2025.1)\n",
            "Requirement already satisfied: six>=1.5 in /usr/local/lib/python3.11/dist-packages (from python-dateutil>=2.7->matplotlib->mplfinance) (1.17.0)\n",
            "Downloading mplfinance-0.12.10b0-py3-none-any.whl (75 kB)\n",
            "\u001b[2K   \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m75.0/75.0 kB\u001b[0m \u001b[31m3.3 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n",
            "\u001b[?25hInstalling collected packages: mplfinance\n",
            "Successfully installed mplfinance-0.12.10b0\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "import numpy as np\n",
        "import random\n",
        "import matplotlib.pyplot as plt\n",
        "import pandas as pd\n",
        "from sklearn.linear_model import LinearRegression\n",
        "from sklearn.model_selection import train_test_split\n",
        "from sklearn.preprocessing import StandardScaler\n",
        "\n",
        "# Function to generate realistic random trader metrics for a professional day trader\n",
        "def generate_random_trader_data():\n",
        "    trader_name = f\"Trader {random.randint(1, 1000)}\"\n",
        "    trades = random.randint(200, 1000)\n",
        "    won_trades = random.randint(trades // 2, trades)\n",
        "    lost_trades = trades - won_trades\n",
        "    win_rate = won_trades / trades\n",
        "    avg_win = round(np.random.normal(loc=50, scale=20), 2)\n",
        "    avg_loss = round(np.random.normal(loc=-40, scale=15), 2)\n",
        "\n",
        "    expectancy = round(np.random.normal(loc=0.03, scale=0.02), 4)\n",
        "    if random.random() < 0.2:\n",
        "        expectancy = round(np.random.uniform(-0.01, -0.03), 4)\n",
        "\n",
        "    std_dev = round(np.random.uniform(0.01, 0.2), 2)\n",
        "    variance = round(np.random.uniform(0.01, 0.1), 2)\n",
        "\n",
        "    return {\n",
        "        \"name\": trader_name,\n",
        "        \"trades\": trades,\n",
        "        \"wonTrades\": won_trades,\n",
        "        \"lostTrades\": lost_trades,\n",
        "        \"wonTradesPercent\": round((won_trades / trades) * 100, 2),\n",
        "        \"lostTradesPercent\": round((lost_trades / trades) * 100, 2),\n",
        "        \"averageWin\": avg_win,\n",
        "        \"averageLoss\": avg_loss,\n",
        "        \"expectancy\": expectancy,\n",
        "        \"standardDeviation\": std_dev,\n",
        "        \"variance\": variance,\n",
        "        \"performance_history\": []\n",
        "    }\n",
        "\n",
        "# Generate a list of traders\n",
        "def generate_traders(num_traders=20):\n",
        "    traders = [generate_random_trader_data() for _ in range(num_traders)]\n",
        "    return traders\n",
        "\n",
        "# Simulate trader performance over 5 years (60 months)\n",
        "def simulate_trader_performance(trader_data, months=60):\n",
        "    expectancy = trader_data[\"expectancy\"] / 100\n",
        "    monthly_returns = []\n",
        "    for _ in range(months):\n",
        "        monthly_return = np.random.normal(loc=expectancy, scale=0.05)\n",
        "        monthly_returns.append(monthly_return)\n",
        "\n",
        "    trader_data[\"performance_history\"] = monthly_returns\n",
        "    return np.cumsum(monthly_returns)\n",
        "\n",
        "# Adjust weights dynamically based on ML model predictions\n",
        "def adjust_weights_with_ml_model(traders, model, week, scaler):\n",
        "    total_performance = 0\n",
        "    weighted_performance = []\n",
        "\n",
        "    for trader in traders:\n",
        "        recent_performance = np.mean(trader[\"performance_history\"][:week])\n",
        "        consistency = np.std(trader[\"performance_history\"][:week])\n",
        "\n",
        "        # Ensure consistency is not NaN (which can happen for early weeks)\n",
        "        if np.isnan(consistency):\n",
        "            consistency = 0\n",
        "\n",
        "        input_features = np.array([[consistency, recent_performance]])\n",
        "        input_features_scaled = scaler.transform(input_features)  # Scale features\n",
        "\n",
        "        weight = model.predict(input_features_scaled)[0]\n",
        "        weighted_performance.append(max(weight, 0))\n",
        "        total_performance += max(weight, 0)\n",
        "\n",
        "    if total_performance == 0:  # Avoid division by zero\n",
        "        return [1 / len(traders)] * len(traders)\n",
        "\n",
        "    normalized_weights = [weight / total_performance for weight in weighted_performance]\n",
        "    return normalized_weights\n",
        "\n",
        "# Process traders and simulate performance\n",
        "def process_traders(trader_list, months=60):\n",
        "    trader_performance = {}\n",
        "    for trader in trader_list:\n",
        "        trader_performance[trader[\"name\"]] = simulate_trader_performance(trader, months)\n",
        "    return trader_performance\n",
        "\n",
        "# Generate equity curve using the ML model\n",
        "def generate_equity_curve_with_ml(trader_performance, traders, model, scaler, months=60):\n",
        "    combined_equity = np.zeros(months)\n",
        "\n",
        "    for week in range(1, months + 1):\n",
        "        weights = adjust_weights_with_ml_model(traders, model, week, scaler)\n",
        "\n",
        "        for i, (name, performance) in enumerate(trader_performance.items()):\n",
        "            combined_equity[week-1] += performance[week-1] * weights[i]\n",
        "\n",
        "    initial_equity = 100000\n",
        "    combined_equity = initial_equity + np.cumsum(combined_equity)\n",
        "\n",
        "    combined_equity = np.maximum(combined_equity, 0)\n",
        "\n",
        "    return combined_equity\n",
        "\n",
        "# Train ML model to predict trader consistency and profitability\n",
        "def train_ml_model(traders, months=60):\n",
        "    X = []\n",
        "    y = []\n",
        "\n",
        "    for trader in traders:\n",
        "        performance = trader[\"performance_history\"]\n",
        "        consistency = np.std(performance)\n",
        "        profitability = np.mean(performance)\n",
        "\n",
        "        X.append([consistency, profitability])\n",
        "        y.append(1 if profitability > 0 else 0)\n",
        "\n",
        "    X = np.array(X)\n",
        "    y = np.array(y)\n",
        "\n",
        "    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)\n",
        "\n",
        "    scaler = StandardScaler()\n",
        "    X_train = scaler.fit_transform(X_train)\n",
        "    X_test = scaler.transform(X_test)\n",
        "\n",
        "    model = LinearRegression()\n",
        "    model.fit(X_train, y_train)\n",
        "\n",
        "    print(\"Model accuracy:\", model.score(X_test, y_test))\n",
        "\n",
        "    return model, scaler\n",
        "\n",
        "# Generate the equity chart\n",
        "def generate_equity_chart(trader_performance, traders):\n",
        "    model, scaler = train_ml_model(traders)\n",
        "    combined_equity = generate_equity_curve_with_ml(trader_performance, traders, model, scaler)\n",
        "\n",
        "    plt.figure(figsize=(12, 6))\n",
        "    plt.plot(combined_equity, label=\"Combined Equity Curve\", color=\"green\")\n",
        "    plt.xlabel(\"Months\")\n",
        "    plt.ylabel(\"Equity (£)\")\n",
        "    plt.title(\"Overall Equity Curve for Combined Traders (5 Year Simulation)\")\n",
        "    plt.legend()\n",
        "    plt.grid(True)\n",
        "    plt.tight_layout()\n",
        "    plt.show()\n",
        "\n",
        "# Main Execution\n",
        "if __name__ == \"__main__\":\n",
        "    traders = generate_traders(20)\n",
        "    trader_performance = process_traders(traders)\n",
        "    generate_equity_chart(trader_performance, traders)\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 624
        },
        "id": "6jxGHSlpPecA",
        "outputId": "709a0b35-c968-4043-bbb6-ad991fc0be40"
      },
      "execution_count": 9,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Model accuracy: 0.6129683591212765\n"
          ]
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 1200x600 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "new\n"
      ],
      "metadata": {
        "id": "DInnB216UllR"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "import numpy as np\n",
        "import pandas as pd\n",
        "from sklearn.model_selection import train_test_split\n",
        "from sklearn.preprocessing import StandardScaler\n",
        "from sklearn.linear_model import LinearRegression\n",
        "import matplotlib.pyplot as plt\n",
        "import random\n",
        "\n",
        "# Example trader data (for testing purposes, you would load your data here)\n",
        "# We are generating random data for 500 traders\n",
        "random.seed(42)\n",
        "\n",
        "def generate_random_trader():\n",
        "    # Randomized trade data\n",
        "    trades = [random.randint(-200, 200) for _ in range(50)]  # Random trades between -200 and 200\n",
        "    return {\"trades\": trades}\n",
        "\n",
        "# Generating 500 random traders\n",
        "traders = [generate_random_trader() for _ in range(500)]\n",
        "\n",
        "# Calculate trader metrics\n",
        "def calculate_trader_metrics(trader):\n",
        "    trades = trader.get(\"trades\", [])\n",
        "\n",
        "    if not trades:\n",
        "        return  # Skip traders with no trades\n",
        "\n",
        "    win_trades = [trade for trade in trades if trade > 0]\n",
        "    loss_trades = [trade for trade in trades if trade < 0]\n",
        "\n",
        "    win_rate = len(win_trades) / len(trades) if len(trades) > 0 else 0\n",
        "    avg_win = np.mean(win_trades) if win_trades else 0\n",
        "    avg_loss = np.mean(loss_trades) if loss_trades else 0\n",
        "    expectancy = win_rate * avg_win - (1 - win_rate) * avg_loss\n",
        "    std_dev = np.std(trades)\n",
        "    variance = std_dev ** 2\n",
        "    sharpe_ratio = np.mean(trades) / std_dev if std_dev != 0 else 0\n",
        "    max_drawdown = np.min(np.cumsum(trades))  # Example: max drawdown based on cumulative profit/loss\n",
        "    profit_factor = np.sum(win_trades) / abs(np.sum(loss_trades)) if loss_trades else 1.0\n",
        "\n",
        "    trader.update({\n",
        "        \"win_rate\": win_rate,\n",
        "        \"avg_win\": avg_win,\n",
        "        \"avg_loss\": avg_loss,\n",
        "        \"expectancy\": expectancy,\n",
        "        \"std_dev\": std_dev,\n",
        "        \"variance\": variance,\n",
        "        \"sharpe_ratio\": sharpe_ratio,\n",
        "        \"max_drawdown\": max_drawdown,\n",
        "        \"profit_factor\": profit_factor\n",
        "    })\n",
        "\n",
        "# Apply the metric calculation to all traders\n",
        "for trader in traders:\n",
        "    calculate_trader_metrics(trader)\n",
        "\n",
        "# Prepare data for machine learning model\n",
        "def prepare_ml_data(traders):\n",
        "    data = []\n",
        "    labels = []\n",
        "    for trader in traders:\n",
        "        if \"win_rate\" in trader:\n",
        "            features = [\n",
        "                trader[\"win_rate\"],\n",
        "                trader[\"avg_win\"],\n",
        "                trader[\"avg_loss\"],\n",
        "                trader[\"expectancy\"],\n",
        "                trader[\"std_dev\"],\n",
        "                trader[\"variance\"],\n",
        "                trader[\"sharpe_ratio\"],\n",
        "                trader[\"max_drawdown\"],\n",
        "                trader[\"profit_factor\"]\n",
        "            ]\n",
        "            label = trader[\"expectancy\"]\n",
        "            data.append(features)\n",
        "            labels.append(label)\n",
        "\n",
        "    return np.array(data), np.array(labels)\n",
        "\n",
        "# Train the machine learning model\n",
        "def train_ml_model(traders):\n",
        "    data, labels = prepare_ml_data(traders)\n",
        "\n",
        "    # Standardize the data\n",
        "    scaler = StandardScaler()\n",
        "    data = scaler.fit_transform(data)\n",
        "\n",
        "    # Train a linear regression model\n",
        "    model = LinearRegression()\n",
        "    model.fit(data, labels)\n",
        "\n",
        "    return model, scaler\n",
        "\n",
        "# Reinforcement Learning-based trader weighting and portfolio management\n",
        "def rl_trader_weights(traders, model, scaler):\n",
        "    trader_weights = []\n",
        "\n",
        "    for trader in traders:\n",
        "        # Create the feature set for the trader\n",
        "        features = [\n",
        "            trader[\"win_rate\"],\n",
        "            trader[\"avg_win\"],\n",
        "            trader[\"avg_loss\"],\n",
        "            trader[\"expectancy\"],\n",
        "            trader[\"std_dev\"],\n",
        "            trader[\"variance\"],\n",
        "            trader[\"sharpe_ratio\"],\n",
        "            trader[\"max_drawdown\"],\n",
        "            trader[\"profit_factor\"]\n",
        "        ]\n",
        "\n",
        "        # Scale the features using the trained scaler\n",
        "        scaled_features = scaler.transform([features])\n",
        "\n",
        "        # Predict the trader's performance with the model\n",
        "        predicted_performance = model.predict(scaled_features)\n",
        "        trader_weights.append(predicted_performance[0])\n",
        "\n",
        "    # Normalize the trader weights to sum to 1\n",
        "    total_weight = sum(trader_weights)\n",
        "    normalized_weights = [weight / total_weight for weight in trader_weights]\n",
        "\n",
        "    return normalized_weights\n",
        "\n",
        "# Generate equity curve with ML and RL-based weights\n",
        "def generate_equity_curve_with_ml_and_rl(trader_performance, traders, model, scaler, months=60, decay_factor=0.9):\n",
        "    equity = [1000]  # Starting with an initial equity of 1000\n",
        "    weights_history = []\n",
        "\n",
        "    for month in range(1, months + 1):\n",
        "        trader_weights = rl_trader_weights(traders, model, scaler)\n",
        "        weights_history.append(trader_weights)\n",
        "\n",
        "        # Distribute equity based on the weighted trader performance\n",
        "        monthly_performance = sum(\n",
        "            trader_weights[i] * trader_performance[i]\n",
        "            for i in range(len(traders))\n",
        "        )\n",
        "\n",
        "        # Update equity with the new performance, applying decay for stability\n",
        "        new_equity = equity[-1] * (1 + decay_factor * monthly_performance)\n",
        "        equity.append(new_equity)\n",
        "\n",
        "    return equity, weights_history\n",
        "\n",
        "# Example performance data for traders (monthly returns)\n",
        "# Normally, you would have performance data for each trader, but for now, we use random performance data\n",
        "random_performance = [random.uniform(0.01, 0.05) for _ in range(len(traders))]\n",
        "\n",
        "# Train the model and generate the equity curve with RL-based weights\n",
        "model, scaler = train_ml_model(traders)\n",
        "combined_equity, weights_history = generate_equity_curve_with_ml_and_rl(random_performance, traders, model, scaler)\n",
        "\n",
        "# Plot the equity curve\n",
        "plt.plot(combined_equity)\n",
        "plt.xlabel('Months')\n",
        "plt.ylabel('Equity Value')\n",
        "plt.title('Equity Curve with Machine Learning & RL-based Portfolio Management')\n",
        "plt.show()\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 472
        },
        "id": "bZNQqvDLcF65",
        "outputId": "ac9d606d-777a-454f-8f93-b3f714bd986b"
      },
      "execution_count": 10,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 640x480 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "pip install yfinance\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "uL2IwzehgXmG",
        "outputId": "c0d72a9a-5581-4d8f-c5d9-e6c39c456a19"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Requirement already satisfied: yfinance in /usr/local/lib/python3.11/dist-packages (0.2.52)\n",
            "Requirement already satisfied: pandas>=1.3.0 in /usr/local/lib/python3.11/dist-packages (from yfinance) (2.2.2)\n",
            "Requirement already satisfied: numpy>=1.16.5 in /usr/local/lib/python3.11/dist-packages (from yfinance) (1.26.4)\n",
            "Requirement already satisfied: requests>=2.31 in /usr/local/lib/python3.11/dist-packages (from yfinance) (2.32.3)\n",
            "Requirement already satisfied: multitasking>=0.0.7 in /usr/local/lib/python3.11/dist-packages (from yfinance) (0.0.11)\n",
            "Requirement already satisfied: lxml>=4.9.1 in /usr/local/lib/python3.11/dist-packages (from yfinance) (5.3.1)\n",
            "Requirement already satisfied: platformdirs>=2.0.0 in /usr/local/lib/python3.11/dist-packages (from yfinance) (4.3.6)\n",
            "Requirement already satisfied: pytz>=2022.5 in /usr/local/lib/python3.11/dist-packages (from yfinance) (2025.1)\n",
            "Requirement already satisfied: frozendict>=2.3.4 in /usr/local/lib/python3.11/dist-packages (from yfinance) (2.4.6)\n",
            "Requirement already satisfied: peewee>=3.16.2 in /usr/local/lib/python3.11/dist-packages (from yfinance) (3.17.9)\n",
            "Requirement already satisfied: beautifulsoup4>=4.11.1 in /usr/local/lib/python3.11/dist-packages (from yfinance) (4.13.3)\n",
            "Requirement already satisfied: html5lib>=1.1 in /usr/local/lib/python3.11/dist-packages (from yfinance) (1.1)\n",
            "Requirement already satisfied: soupsieve>1.2 in /usr/local/lib/python3.11/dist-packages (from beautifulsoup4>=4.11.1->yfinance) (2.6)\n",
            "Requirement already satisfied: typing-extensions>=4.0.0 in /usr/local/lib/python3.11/dist-packages (from beautifulsoup4>=4.11.1->yfinance) (4.12.2)\n",
            "Requirement already satisfied: six>=1.9 in /usr/local/lib/python3.11/dist-packages (from html5lib>=1.1->yfinance) (1.17.0)\n",
            "Requirement already satisfied: webencodings in /usr/local/lib/python3.11/dist-packages (from html5lib>=1.1->yfinance) (0.5.1)\n",
            "Requirement already satisfied: python-dateutil>=2.8.2 in /usr/local/lib/python3.11/dist-packages (from pandas>=1.3.0->yfinance) (2.8.2)\n",
            "Requirement already satisfied: tzdata>=2022.7 in /usr/local/lib/python3.11/dist-packages (from pandas>=1.3.0->yfinance) (2025.1)\n",
            "Requirement already satisfied: charset-normalizer<4,>=2 in /usr/local/lib/python3.11/dist-packages (from requests>=2.31->yfinance) (3.4.1)\n",
            "Requirement already satisfied: idna<4,>=2.5 in /usr/local/lib/python3.11/dist-packages (from requests>=2.31->yfinance) (3.10)\n",
            "Requirement already satisfied: urllib3<3,>=1.21.1 in /usr/local/lib/python3.11/dist-packages (from requests>=2.31->yfinance) (2.3.0)\n",
            "Requirement already satisfied: certifi>=2017.4.17 in /usr/local/lib/python3.11/dist-packages (from requests>=2.31->yfinance) (2025.1.31)\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "import pandas as pd\n",
        "import numpy as np\n",
        "import random\n",
        "from sklearn.model_selection import train_test_split\n",
        "from sklearn.preprocessing import StandardScaler\n",
        "from sklearn.ensemble import RandomForestRegressor\n",
        "import matplotlib.pyplot as plt\n",
        "import yfinance as yf\n",
        "from sklearn.metrics import mean_squared_error, r2_score\n",
        "\n",
        "# Simulate 500 traders with random data\n",
        "def simulate_traders(num_traders=500):\n",
        "    traders = []\n",
        "    for _ in range(num_traders):\n",
        "        num_trades = random.randint(50, 200)  # Each trader has between 50 and 200 trades\n",
        "        trades = [random.choice([random.randint(-100, -20), random.randint(20, 200)]) for _ in range(num_trades)]\n",
        "\n",
        "        trader = {\n",
        "            'trades': trades,\n",
        "            'win_rate': 0,  # Placeholder, to be calculated later\n",
        "            'avg_win': 0,   # Placeholder\n",
        "            'avg_loss': 0,  # Placeholder\n",
        "            'expectancy': 0,  # Placeholder\n",
        "            'std_dev': 0,     # Placeholder\n",
        "            'variance': 0,    # Placeholder\n",
        "            'sharpe_ratio': 0,  # Placeholder\n",
        "            'max_drawdown': 0,  # Placeholder\n",
        "            'profit_factor': 0,  # Placeholder\n",
        "            'balance': 1000  # Starting balance for ROI calculation\n",
        "        }\n",
        "        traders.append(trader)\n",
        "\n",
        "    return traders\n",
        "\n",
        "# Function to calculate trader performance metrics\n",
        "def calculate_trader_metrics(trader):\n",
        "    trades = trader[\"trades\"]\n",
        "    if len(trades) == 0:\n",
        "        trader[\"win_rate\"] = 0\n",
        "        trader[\"avg_win\"] = 0\n",
        "        trader[\"avg_loss\"] = 0\n",
        "        trader[\"expectancy\"] = 0\n",
        "        trader[\"std_dev\"] = 0\n",
        "        trader[\"variance\"] = 0\n",
        "        trader[\"sharpe_ratio\"] = 0\n",
        "        trader[\"max_drawdown\"] = 0\n",
        "        trader[\"profit_factor\"] = 0\n",
        "        return trader\n",
        "\n",
        "    wins = [trade for trade in trades if trade > 0]\n",
        "    losses = [trade for trade in trades if trade < 0]\n",
        "\n",
        "    win_rate = len(wins) / len(trades)\n",
        "    avg_win = np.mean(wins) if wins else 0\n",
        "    avg_loss = np.mean(losses) if losses else 0\n",
        "\n",
        "    expectancy = (win_rate * avg_win) + ((1 - win_rate) * avg_loss)\n",
        "    std_dev = np.std(trades)\n",
        "    variance = np.var(trades)\n",
        "\n",
        "    # Sharpe ratio calculation (assuming risk-free rate = 0)\n",
        "    sharpe_ratio = np.mean(trades) / np.std(trades) if std_dev != 0 else 0\n",
        "    max_drawdown = min(trades)  # Simplified for example\n",
        "    profit_factor = sum(wins) / abs(sum(losses)) if losses else 0\n",
        "\n",
        "    trader.update({\n",
        "        \"win_rate\": win_rate,\n",
        "        \"avg_win\": avg_win,\n",
        "        \"avg_loss\": avg_loss,\n",
        "        \"expectancy\": expectancy,\n",
        "        \"std_dev\": std_dev,\n",
        "        \"variance\": variance,\n",
        "        \"sharpe_ratio\": sharpe_ratio,\n",
        "        \"max_drawdown\": max_drawdown,\n",
        "        \"profit_factor\": profit_factor\n",
        "    })\n",
        "\n",
        "    return trader\n",
        "\n",
        "# Function to calculate ROI for each trader\n",
        "def calculate_roi(trader):\n",
        "    initial_balance = 1000  # Assume an initial balance of 1000 for calculation\n",
        "    final_balance = trader['balance']  # Use the trader's final balance\n",
        "    return (final_balance - initial_balance) / initial_balance * 100  # ROI as a percentage\n",
        "\n",
        "# Function to generate equity curve with machine learning model and risk-adjusted metrics\n",
        "def generate_equity_curve_with_ml(trader_performance, traders, model, scaler):\n",
        "    equity_curve = [1000]  # Starting with a capital of 1000 USD\n",
        "    for i in range(len(trader_performance)):\n",
        "        # Filter for best traders based on performance metrics\n",
        "        best_traders = [trader for trader in traders if trader['sharpe_ratio'] > 0.5 and trader['profit_factor'] > 1.5]\n",
        "\n",
        "        # If no best traders, skip this time step\n",
        "        if len(best_traders) == 0:\n",
        "            equity_curve.append(equity_curve[-1])\n",
        "            continue\n",
        "\n",
        "        # Select a trader and predict return based on the ML model\n",
        "        best_trader = random.choice(best_traders)  # Randomly choose a trader\n",
        "        trader_features = np.array([\n",
        "            best_trader[\"win_rate\"],\n",
        "            best_trader[\"avg_win\"],\n",
        "            best_trader[\"avg_loss\"],\n",
        "            best_trader[\"expectancy\"],\n",
        "            best_trader[\"std_dev\"],\n",
        "            best_trader[\"variance\"],\n",
        "            best_trader[\"sharpe_ratio\"],\n",
        "            best_trader[\"max_drawdown\"]\n",
        "        ]).reshape(1, -1)\n",
        "\n",
        "        # Scale and predict\n",
        "        scaled_features = scaler.transform(trader_features)\n",
        "        predicted_return = model.predict(scaled_features)[0]\n",
        "\n",
        "        # Adjust the equity based on prediction\n",
        "        equity_curve.append(equity_curve[-1] * (1 + predicted_return))\n",
        "\n",
        "    return equity_curve\n",
        "\n",
        "# Train ML model with the trader data\n",
        "def train_ml_model(traders):\n",
        "    features = []\n",
        "    target = []\n",
        "    for trader in traders:\n",
        "        trader = calculate_trader_metrics(trader)\n",
        "        features.append([\n",
        "            trader[\"win_rate\"], trader[\"avg_win\"], trader[\"avg_loss\"],\n",
        "            trader[\"expectancy\"], trader[\"std_dev\"], trader[\"variance\"],\n",
        "            trader[\"sharpe_ratio\"], trader[\"max_drawdown\"]\n",
        "        ])\n",
        "        target.append(trader[\"expectancy\"])  # For example: predict trader expectancy\n",
        "\n",
        "    # Convert to numpy arrays\n",
        "    X = np.array(features)\n",
        "    y = np.array(target)\n",
        "\n",
        "    # Split data into train and test\n",
        "    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)\n",
        "\n",
        "    # Scale data\n",
        "    scaler = StandardScaler()\n",
        "    X_train_scaled = scaler.fit_transform(X_train)\n",
        "    X_test_scaled = scaler.transform(X_test)\n",
        "\n",
        "    # Train RandomForest Regressor model\n",
        "    model = RandomForestRegressor(n_estimators=100, random_state=42)\n",
        "    model.fit(X_train_scaled, y_train)\n",
        "\n",
        "    # Return the trained model and scaler\n",
        "    return model, scaler\n",
        "\n",
        "# Backtest system using forex data and trader predictions\n",
        "def backtest_system(traders, forex_features, model, scaler):\n",
        "    equity_curve = [1000]  # Starting capital\n",
        "    for i in range(len(forex_features)):\n",
        "        trader = random.choice(traders)  # Choose a trader\n",
        "        features = np.array([\n",
        "            trader[\"win_rate\"],\n",
        "            trader[\"avg_win\"],\n",
        "            trader[\"avg_loss\"],\n",
        "            trader[\"expectancy\"],\n",
        "            trader[\"std_dev\"],\n",
        "            trader[\"variance\"],\n",
        "            trader[\"sharpe_ratio\"],\n",
        "            trader[\"max_drawdown\"]\n",
        "        ]).reshape(1, -1)\n",
        "\n",
        "        # Scale and predict\n",
        "        scaled_features = scaler.transform(features)\n",
        "        predicted_return = model.predict(scaled_features)[0]\n",
        "\n",
        "        # Adjust the equity based on prediction\n",
        "        equity_curve.append(equity_curve[-1] * (1 + predicted_return))\n",
        "\n",
        "    return equity_curve\n",
        "\n",
        "# Example usage:\n",
        "\n",
        "# Simulate the 500 traders data\n",
        "traders = simulate_traders(num_traders=500)\n",
        "\n",
        "# Calculate the ROI for each trader\n",
        "for trader in traders:\n",
        "    trader['roi'] = calculate_roi(trader)\n",
        "\n",
        "# Calculate overall index ROI\n",
        "index_roi = np.mean([trader['roi'] for trader in traders])\n",
        "print(f\"Overall Index ROI: {index_roi}%\")\n",
        "\n",
        "# Train the ML model using trader data\n",
        "model, scaler = train_ml_model(traders)\n",
        "\n",
        "# Fetch forex data (you may need to wait for a while before trying due to rate-limiting)\n",
        "forex_data = yf.download('EURUSD=X', start='2015-01-01', end='2020-12-31')\n",
        "\n",
        "# Assuming forex features are extracted from the forex data (this can be adjusted to match the actual data structure)\n",
        "forex_features = forex_data[['Open', 'High', 'Low', 'Close']].values\n",
        "\n",
        "# Generate and backtest the system\n",
        "combined_equity = backtest_system(traders, forex_features, model, scaler)\n",
        "\n",
        "# Plot the results\n",
        "plt.figure(figsize=(10, 5))\n",
        "plt.plot(combined_equity, label='Equity Curve')\n",
        "plt.title('Trader Performance with ML & Risk Management')\n",
        "plt.xlabel('Time')\n",
        "plt.ylabel('Equity')\n",
        "plt.legend()\n",
        "plt.show()\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 574
        },
        "id": "iKjkUUBWpQIF",
        "outputId": "41199941-3526-4ff4-b858-1154c05f1fcb"
      },
      "execution_count": 11,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Overall Index ROI: 0.0%\n",
            "YF.download() has changed argument auto_adjust default to True\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "\r[*********************100%***********************]  1 of 1 completed\n",
            "<ipython-input-11-967bacfe3d76>:173: RuntimeWarning: overflow encountered in scalar multiply\n",
            "  equity_curve.append(equity_curve[-1] * (1 + predicted_return))\n"
          ]
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 1000x500 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    }
  ]
}
